
Project_SecurityAccess.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08006124  08006124  00016124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e4  080062e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ec  080062ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080062f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000204  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f69  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002116  00000000  00000000  00031009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001010  00000000  00000000  00034118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021882  00000000  00000000  00035128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001087c  00000000  00000000  000569aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0da9  00000000  00000000  00067226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00137fcf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bf4  00000000  00000000  00138020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800610c 	.word	0x0800610c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800610c 	.word	0x0800610c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f001 fc04 	bl	8001d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f836 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fa52 	bl	8000a28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f89c 	bl	80006c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000588:	f000 f8ee 	bl	8000768 <MX_CAN1_Init>
  MX_CAN2_Init();
 800058c:	f000 f960 	bl	8000850 <MX_CAN2_Init>
  MX_USART1_UART_Init();
 8000590:	f000 fa20 	bl	80009d4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000594:	f000 f9d0 	bl	8000938 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);			// khoi dong module ADC
 8000598:	4810      	ldr	r0, [pc, #64]	; (80005dc <main+0x68>)
 800059a:	f001 fccd 	bl	8001f38 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3);	// khoi dong module timer
 800059e:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x6c>)
 80005a0:	f003 fe00 	bl	80041a4 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);			// khởi động module can1
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0x70>)
 80005a6:	f002 f9a1 	bl	80028ec <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);			// khởi động module can2
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <main+0x74>)
 80005ac:	f002 f99e 	bl	80028ec <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // Activate the notification
 80005b0:	2102      	movs	r1, #2
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <main+0x70>)
 80005b4:	f002 fbcb 	bl	8002d4e <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);  // Activate the notification
 80005b8:	2110      	movs	r1, #16
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <main+0x74>)
 80005bc:	f002 fbc7 	bl	8002d4e <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CheckAndHandleService27();
 80005c0:	f000 feb2 	bl	8001328 <CheckAndHandleService27>
	  CheckAndHandleService22();
 80005c4:	f000 fea0 	bl	8001308 <CheckAndHandleService22>
	  CheckAndHandleService2E();
 80005c8:	f000 febe 	bl	8001348 <CheckAndHandleService2E>
	  CheckAndHandleTesterCANFIFO0();
 80005cc:	f000 fee6 	bl	800139c <CheckAndHandleTesterCANFIFO0>
	  CheckAndHandleECUCANFIFO1();
 80005d0:	f000 ff1c 	bl	800140c <CheckAndHandleECUCANFIFO1>
	  CheckOverTime();
 80005d4:	f000 ffaa 	bl	800152c <CheckOverTime>
	  CheckAndHandleService27();
 80005d8:	e7f2      	b.n	80005c0 <main+0x4c>
 80005da:	bf00      	nop
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	20000124 	.word	0x20000124
 80005e4:	200000d4 	.word	0x200000d4
 80005e8:	200000fc 	.word	0x200000fc

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fdf0 	bl	80051e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	; 0xa8
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f003 f8af 	bl	80037d4 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800067c:	f001 f8a2 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 fb10 	bl	8003cc4 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006aa:	f001 f88b 	bl	80017c4 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_ADC1_Init+0xa0>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_ADC1_Init+0x9c>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_ADC1_Init+0x9c>)
 80006e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80006e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_ADC1_Init+0x9c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_ADC1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_ADC1_Init+0x9c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_ADC1_Init+0x9c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_ADC1_Init+0x9c>)
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_ADC1_Init+0xa4>)
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_ADC1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ADC1_Init+0x9c>)
 8000710:	2201      	movs	r2, #1
 8000712:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_ADC1_Init+0x9c>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_ADC1_Init+0x9c>)
 800071e:	2201      	movs	r2, #1
 8000720:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000722:	480e      	ldr	r0, [pc, #56]	; (800075c <MX_ADC1_Init+0x9c>)
 8000724:	f001 fbc4 	bl	8001eb0 <HAL_ADC_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800072e:	f001 f849 	bl	80017c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000732:	2306      	movs	r3, #6
 8000734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000736:	2301      	movs	r3, #1
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_ADC1_Init+0x9c>)
 8000744:	f001 fcd8 	bl	80020f8 <HAL_ADC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800074e:	f001 f839 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000008c 	.word	0x2000008c
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	; 0x30
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	tester_TxHeader.DLC = data_length;  // data length
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <MX_CAN1_Init+0xd8>)
 8000770:	2208      	movs	r2, #8
 8000772:	611a      	str	r2, [r3, #16]
	tester_TxHeader.IDE = CAN_ID_STD;
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_CAN1_Init+0xd8>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
	tester_TxHeader.RTR = CAN_RTR_DATA;
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <MX_CAN1_Init+0xd8>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
	tester_TxHeader.StdId = tester_ID;  // ID
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_CAN1_Init+0xd8>)
 8000782:	f240 7212 	movw	r2, #1810	; 0x712
 8000786:	601a      	str	r2, [r3, #0]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	for (int i = 0; i < 8; i++){
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800078c:	e007      	b.n	800079e <MX_CAN1_Init+0x36>
		tester_TxData[i] = 0x55;
 800078e:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <MX_CAN1_Init+0xdc>)
 8000790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000792:	4413      	add	r3, r2
 8000794:	2255      	movs	r2, #85	; 0x55
 8000796:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8000798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079a:	3301      	adds	r3, #1
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	ddf4      	ble.n	800078e <MX_CAN1_Init+0x26>
	}
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007a6:	4a29      	ldr	r2, [pc, #164]	; (800084c <MX_CAN1_Init+0xe4>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80007aa:	4b27      	ldr	r3, [pc, #156]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80007c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80007c4:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007c6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80007ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007da:	2201      	movs	r2, #1
 80007dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_CAN1_Init+0xe0>)
 80007f2:	f001 fe9f 	bl	8002534 <HAL_CAN_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CAN1_Init+0x98>
  {
    Error_Handler();
 80007fc:	f000 ffe2 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000800:	2301      	movs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000804:	2312      	movs	r3, #18
 8000806:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterIdHigh = ECU_ID<<5;
 800080c:	f24f 4340 	movw	r3, #62528	; 0xf440
 8000810:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterIdLow = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdHigh = ECU_ID<<5;
 8000816:	f24f 4340 	movw	r3, #62528	; 0xf440
 800081a:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000828:	2314      	movs	r3, #20
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_CAN1_Init+0xe0>)
 8000832:	f001 ff7b 	bl	800272c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200001b0 	.word	0x200001b0
 8000844:	200001e4 	.word	0x200001e4
 8000848:	200000d4 	.word	0x200000d4
 800084c:	40006400 	.word	0x40006400

08000850 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN2_Init 0 */
	ECU_TxHeader.DLC = data_length;  // data length
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <MX_CAN2_Init+0xd8>)
 8000858:	2208      	movs	r2, #8
 800085a:	611a      	str	r2, [r3, #16]
	ECU_TxHeader.IDE = CAN_ID_STD;
 800085c:	4b32      	ldr	r3, [pc, #200]	; (8000928 <MX_CAN2_Init+0xd8>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
	ECU_TxHeader.RTR = CAN_RTR_DATA;
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <MX_CAN2_Init+0xd8>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
	ECU_TxHeader.StdId = ECU_ID;  // ID
 8000868:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <MX_CAN2_Init+0xd8>)
 800086a:	f240 72a2 	movw	r2, #1954	; 0x7a2
 800086e:	601a      	str	r2, [r3, #0]
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */
	for (int i = 0; i < 8; i++){
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000874:	e007      	b.n	8000886 <MX_CAN2_Init+0x36>
		ECU_TxData[i] = 0x55;
 8000876:	4a2d      	ldr	r2, [pc, #180]	; (800092c <MX_CAN2_Init+0xdc>)
 8000878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087a:	4413      	add	r3, r2
 800087c:	2255      	movs	r2, #85	; 0x55
 800087e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++){
 8000880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000882:	3301      	adds	r3, #1
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000888:	2b07      	cmp	r3, #7
 800088a:	ddf4      	ble.n	8000876 <MX_CAN2_Init+0x26>
	}
  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800088c:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_CAN2_Init+0xe0>)
 800088e:	4a29      	ldr	r2, [pc, #164]	; (8000934 <MX_CAN2_Init+0xe4>)
 8000890:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_CAN2_Init+0xe0>)
 8000894:	2204      	movs	r2, #4
 8000896:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_CAN2_Init+0xe0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80008aa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008ae:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008d2:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008d8:	4815      	ldr	r0, [pc, #84]	; (8000930 <MX_CAN2_Init+0xe0>)
 80008da:	f001 fe2b 	bl	8002534 <HAL_CAN_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_CAN2_Init+0x98>
  {
    Error_Handler();
 80008e4:	f000 ff6e 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80008ec:	230a      	movs	r3, #10
 80008ee:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterIdHigh = tester_ID<<5;
 80008f4:	f24e 2340 	movw	r3, #57920	; 0xe240
 80008f8:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterIdLow = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdHigh = tester_ID<<5;
 80008fe:	f24e 2340 	movw	r3, #57920	; 0xe240
 8000902:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_CAN2_Init+0xe0>)
 800091a:	f001 ff07 	bl	800272c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001f8 	.word	0x200001f8
 800092c:	2000022c 	.word	0x2000022c
 8000930:	200000fc 	.word	0x200000fc
 8000934:	40006800 	.word	0x40006800

08000938 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000954:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_TIM3_Init+0x94>)
 8000956:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <MX_TIM3_Init+0x98>)
 8000958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <MX_TIM3_Init+0x94>)
 800095c:	2263      	movs	r2, #99	; 0x63
 800095e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_TIM3_Init+0x94>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 839;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <MX_TIM3_Init+0x94>)
 8000968:	f240 3247 	movw	r2, #839	; 0x347
 800096c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_TIM3_Init+0x94>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_TIM3_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_TIM3_Init+0x94>)
 800097c:	f003 fbc2 	bl	8004104 <HAL_TIM_Base_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 ff1d 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_TIM3_Init+0x94>)
 8000998:	f003 fd7c 	bl	8004494 <HAL_TIM_ConfigClockSource>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 ff0f 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_TIM3_Init+0x94>)
 80009b4:	f003 ff98 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009be:	f000 ff01 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000124 	.word	0x20000124
 80009d0:	40000400 	.word	0x40000400

080009d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MX_USART1_UART_Init+0x50>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f003 fffc 	bl	8004a08 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a16:	f000 fed5 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000016c 	.word	0x2000016c
 8000a24:	40011000 	.word	0x40011000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b48      	ldr	r3, [pc, #288]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a40      	ldr	r2, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a39      	ldr	r2, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x13c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	482d      	ldr	r0, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x140>)
 8000ab4:	f002 fe5c 	bl	8003770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MID_Pin LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = MID_Pin|LEFT_Pin|RIGHT_Pin;
 8000ab8:	f242 0390 	movw	r3, #8336	; 0x2090
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000abe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4827      	ldr	r0, [pc, #156]	; (8000b6c <MX_GPIO_Init+0x144>)
 8000ad0:	f002 fc9a 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : WakeUp_Pin USER_Pin */
  GPIO_InitStruct.Pin = WakeUp_Pin|USER_Pin;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4821      	ldr	r0, [pc, #132]	; (8000b70 <MX_GPIO_Init+0x148>)
 8000aea:	f002 fc8d 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000aee:	2301      	movs	r3, #1
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_GPIO_Init+0x140>)
 8000b06:	f002 fc7f 	bl	8003408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f002 fc43 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b14:	2006      	movs	r0, #6
 8000b16:	f002 fc5c 	bl	80033d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f002 fc3b 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b24:	2007      	movs	r0, #7
 8000b26:	f002 fc54 	bl	80033d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f002 fc33 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b34:	200a      	movs	r0, #10
 8000b36:	f002 fc4c 	bl	80033d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2017      	movs	r0, #23
 8000b40:	f002 fc2b 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b44:	2017      	movs	r0, #23
 8000b46:	f002 fc44 	bl	80033d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2028      	movs	r0, #40	; 0x28
 8000b50:	f002 fc23 	bl	800339a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b54:	2028      	movs	r0, #40	; 0x28
 8000b56:	f002 fc3c 	bl	80033d2 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000

08000b74 <store_joystick_value>:

/* USER CODE BEGIN 4 */

void store_joystick_value(uint8_t Data){
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	joystick = Data;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <store_joystick_value+0x1c>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	7013      	strb	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000248 	.word	0x20000248

08000b94 <get_PCI>:
uint8_t get_PCI(uint8_t Data){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	return Data >> 4;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	091b      	lsrs	r3, r3, #4
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <get_size>:
uint8_t get_size(uint8_t Data){
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	return Data & 0x0F;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	b2db      	uxtb	r3, r3
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <get_SID>:
uint8_t get_SID(uint8_t Data[]){
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return Data[1];
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	785b      	ldrb	r3, [r3, #1]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <get_DID>:
uint16_t get_DID(uint8_t Data[]){
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	uint16_t temp = Data[2];
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	81fb      	strh	r3, [r7, #14]
	temp += Data[3];
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3303      	adds	r3, #3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	4413      	add	r3, r2
 8000c08:	81fb      	strh	r3, [r7, #14]
	return temp;
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <get_sub_function>:
uint8_t get_sub_function(uint8_t Data[]){
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	return Data[2];
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	789b      	ldrb	r3, [r3, #2]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <generate_seed>:
uint8_t generate_seed(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	return (uint8_t)(HAL_GetTick());
 8000c34:	f001 f90c 	bl	8001e50 <HAL_GetTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b2db      	uxtb	r3, r3
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <cal_key>:
uint8_t cal_key(uint8_t Data){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	return Data + 1;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2db      	uxtb	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <is_accept_key>:
uint8_t is_accept_key(uint8_t Data[],uint8_t  store_seed[]){
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	for (int i = 3; i < 8; i++){
 8000c66:	2303      	movs	r3, #3
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e012      	b.n	8000c92 <is_accept_key+0x36>
		if (Data[i] != cal_key(store_seed[i])) return false;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	781c      	ldrb	r4, [r3, #0]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffdf 	bl	8000c40 <cal_key>
 8000c82:	4603      	mov	r3, r0
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d001      	beq.n	8000c8c <is_accept_key+0x30>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e006      	b.n	8000c9a <is_accept_key+0x3e>
	for (int i = 3; i < 8; i++){
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	dde9      	ble.n	8000c6c <is_accept_key+0x10>
	}
	return true;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd90      	pop	{r4, r7, pc}

08000ca2 <get_NRC>:
uint8_t get_NRC(uint8_t Data[]){
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
	return Data[2];
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	789b      	ldrb	r3, [r3, #2]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <ReadDataByIdentifierRequestFrame>:
void ReadDataByIdentifierRequestFrame(uint8_t Data[]){
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	Data[0] = 0x03;	// PCi, size
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x22;	// SID
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	2222      	movs	r2, #34	; 0x22
 8000cce:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xF0;	// DID
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	22f0      	movs	r2, #240	; 0xf0
 8000cd6:	701a      	strb	r2, [r3, #0]
	Data[3] = 0x02;	// DID
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3303      	adds	r3, #3
 8000cdc:	2202      	movs	r2, #2
 8000cde:	701a      	strb	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <ReadDataByIdentifierResponseFrame>:
void ReadDataByIdentifierResponseFrame(uint8_t Data[], uint8_t adc_value){
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	Data[0] = 0x04;	// PCI
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x62;	// PSID
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3301      	adds	r3, #1
 8000d02:	2262      	movs	r2, #98	; 0x62
 8000d04:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xF0;	// DID
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3302      	adds	r3, #2
 8000d0a:	22f0      	movs	r2, #240	; 0xf0
 8000d0c:	701a      	strb	r2, [r3, #0]
	Data[3] = 0x02; // DID
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3303      	adds	r3, #3
 8000d12:	2202      	movs	r2, #2
 8000d14:	701a      	strb	r2, [r3, #0]
	Data[4] = adc_value;	// data
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <WriteDataByIdentifierRequestFrame>:
void WriteDataByIdentifierRequestFrame(uint8_t Data[], uint8_t joystick_position){
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	70fb      	strb	r3, [r7, #3]
	Data[0] = 0x04;	// PCi, size
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x2E;	// SID
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	222e      	movs	r2, #46	; 0x2e
 8000d42:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xF1;	// DID
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3302      	adds	r3, #2
 8000d48:	22f1      	movs	r2, #241	; 0xf1
 8000d4a:	701a      	strb	r2, [r3, #0]
	Data[3] = 0x12;	// DID
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3303      	adds	r3, #3
 8000d50:	2212      	movs	r2, #18
 8000d52:	701a      	strb	r2, [r3, #0]
	Data[4] = joystick_position;	// data
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3304      	adds	r3, #4
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	701a      	strb	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <WriteDataByIdentifierResponseFrame>:
void WriteDataByIdentifierResponseFrame(uint8_t Data[]){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	Data[0] = 0x03;	// PCi, size
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x6E;	// PSID
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	226e      	movs	r2, #110	; 0x6e
 8000d7c:	701a      	strb	r2, [r3, #0]
	Data[2] = 0xF1;	// DID
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3302      	adds	r3, #2
 8000d82:	22f1      	movs	r2, #241	; 0xf1
 8000d84:	701a      	strb	r2, [r3, #0]
	Data[3] = 0x12;	// DID
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	2212      	movs	r2, #18
 8000d8c:	701a      	strb	r2, [r3, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <securityAccessServiceSeedRequestFrame>:
void securityAccessServiceSeedRequestFrame(uint8_t Data[]){
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	Data[0] = 0x02;	// PCI la 0, size la 2
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2202      	movs	r2, #2
 8000da6:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x27;	// service 27
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3301      	adds	r3, #1
 8000dac:	2227      	movs	r2, #39	; 0x27
 8000dae:	701a      	strb	r2, [r3, #0]
	Data[2] = 0x01;	// request seed
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3302      	adds	r3, #2
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <securityAccessServiceSeedResponseFrame>:
void securityAccessServiceSeedResponseFrame(uint8_t Data[]){
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	Data[0] = 0x07;	// PCI la 0, size la 4
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2207      	movs	r2, #7
 8000dd0:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x67;	// response $27 nen la $67
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	2267      	movs	r2, #103	; 0x67
 8000dd8:	701a      	strb	r2, [r3, #0]
	Data[2] = 0x01;	// request seed
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
	Data[3] = generate_seed();	// Security Seed
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	1cdc      	adds	r4, r3, #3
 8000de6:	f7ff ff23 	bl	8000c30 <generate_seed>
 8000dea:	4603      	mov	r3, r0
 8000dec:	7023      	strb	r3, [r4, #0]
	ECU_store_seed[3] = Data[3];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	78da      	ldrb	r2, [r3, #3]
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <securityAccessServiceSeedResponseFrame+0x8c>)
 8000df4:	70da      	strb	r2, [r3, #3]
	Data[4] = generate_seed();	// Security Seed
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	1d1c      	adds	r4, r3, #4
 8000dfa:	f7ff ff19 	bl	8000c30 <generate_seed>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	7023      	strb	r3, [r4, #0]
	ECU_store_seed[4] = Data[4];
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	791a      	ldrb	r2, [r3, #4]
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <securityAccessServiceSeedResponseFrame+0x8c>)
 8000e08:	711a      	strb	r2, [r3, #4]
	Data[5] = generate_seed();	// Security Seed
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	1d5c      	adds	r4, r3, #5
 8000e0e:	f7ff ff0f 	bl	8000c30 <generate_seed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	7023      	strb	r3, [r4, #0]
	ECU_store_seed[5] = Data[5];
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	795a      	ldrb	r2, [r3, #5]
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <securityAccessServiceSeedResponseFrame+0x8c>)
 8000e1c:	715a      	strb	r2, [r3, #5]
	Data[6] = generate_seed();	// Security Seed
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1d9c      	adds	r4, r3, #6
 8000e22:	f7ff ff05 	bl	8000c30 <generate_seed>
 8000e26:	4603      	mov	r3, r0
 8000e28:	7023      	strb	r3, [r4, #0]
	ECU_store_seed[6] = Data[6];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	799a      	ldrb	r2, [r3, #6]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <securityAccessServiceSeedResponseFrame+0x8c>)
 8000e30:	719a      	strb	r2, [r3, #6]
	Data[7] = generate_seed();	// Security Seed
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	1ddc      	adds	r4, r3, #7
 8000e36:	f7ff fefb 	bl	8000c30 <generate_seed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	7023      	strb	r3, [r4, #0]
	ECU_store_seed[7] = Data[7];
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	79da      	ldrb	r2, [r3, #7]
 8000e42:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <securityAccessServiceSeedResponseFrame+0x8c>)
 8000e44:	71da      	strb	r2, [r3, #7]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000240 	.word	0x20000240

08000e54 <securityAccessSendKeyRequestFrame>:
void securityAccessSendKeyRequestFrame(uint8_t Tx_Data[], uint8_t Data[]){
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	Tx_Data[0] = 0x07;				// PCI la 0, size la 4
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2207      	movs	r2, #7
 8000e62:	701a      	strb	r2, [r3, #0]
	Tx_Data[1] = 0x27;				// response $27 nen la $67
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3301      	adds	r3, #1
 8000e68:	2227      	movs	r2, #39	; 0x27
 8000e6a:	701a      	strb	r2, [r3, #0]
	Tx_Data[2] = 0x02;				// response seed = request seed + 1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3302      	adds	r3, #2
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
	Tx_Data[3] = cal_key(Data[3]);	// Security key
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3303      	adds	r3, #3
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	1cdc      	adds	r4, r3, #3
 8000e7e:	4610      	mov	r0, r2
 8000e80:	f7ff fede 	bl	8000c40 <cal_key>
 8000e84:	4603      	mov	r3, r0
 8000e86:	7023      	strb	r3, [r4, #0]
	Tx_Data[4] = cal_key(Data[4]);	// Security key
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	1d1c      	adds	r4, r3, #4
 8000e92:	4610      	mov	r0, r2
 8000e94:	f7ff fed4 	bl	8000c40 <cal_key>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	7023      	strb	r3, [r4, #0]
	Tx_Data[5] = cal_key(Data[5]);	// Security key
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3305      	adds	r3, #5
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	1d5c      	adds	r4, r3, #5
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f7ff feca 	bl	8000c40 <cal_key>
 8000eac:	4603      	mov	r3, r0
 8000eae:	7023      	strb	r3, [r4, #0]
	Tx_Data[6] = cal_key(Data[6]);	// Security key
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	1d9c      	adds	r4, r3, #6
 8000eba:	4610      	mov	r0, r2
 8000ebc:	f7ff fec0 	bl	8000c40 <cal_key>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	7023      	strb	r3, [r4, #0]
	Tx_Data[7] = cal_key(Data[7]);	// Security key
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	781a      	ldrb	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	1ddc      	adds	r4, r3, #7
 8000ece:	4610      	mov	r0, r2
 8000ed0:	f7ff feb6 	bl	8000c40 <cal_key>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	7023      	strb	r3, [r4, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <securityAccessSendKeyResponseFrame>:
void securityAccessSendKeyResponseFrame(uint8_t Data[]){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	Data[0] = 0x02;	// PCI la 0, size la 2
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x67;	// response $27 nen la $67
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	2267      	movs	r2, #103	; 0x67
 8000ef4:	701a      	strb	r2, [r3, #0]
	Data[2] = 0x02;	// response seed = request seed + 1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3302      	adds	r3, #2
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
	if (is_ECU_unlock == true) Data[3] = false;	// unlock or lock
 8000efe:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <securityAccessSendKeyResponseFrame+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d104      	bne.n	8000f10 <securityAccessSendKeyResponseFrame+0x30>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3303      	adds	r3, #3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	else Data[3] = true;
}
 8000f0e:	e003      	b.n	8000f18 <securityAccessSendKeyResponseFrame+0x38>
	else Data[3] = true;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3303      	adds	r3, #3
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000024c 	.word	0x2000024c

08000f28 <SecurityAccessNegativeResponseMessage>:
void SecurityAccessNegativeResponseMessage(uint8_t Data[], uint8_t flag_NRC){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
	Data[0] = 0x03;	// PCI la 0, size la 3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
	Data[1] = 0x7F;	// NRC code
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	227f      	movs	r2, #127	; 0x7f
 8000f40:	701a      	strb	r2, [r3, #0]
	switch(flag_NRC) {
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	2b35      	cmp	r3, #53	; 0x35
 8000f46:	d00b      	beq.n	8000f60 <SecurityAccessNegativeResponseMessage+0x38>
 8000f48:	2b35      	cmp	r3, #53	; 0x35
 8000f4a:	dc12      	bgt.n	8000f72 <SecurityAccessNegativeResponseMessage+0x4a>
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	d002      	beq.n	8000f56 <SecurityAccessNegativeResponseMessage+0x2e>
 8000f50:	2b13      	cmp	r3, #19
 8000f52:	d00a      	beq.n	8000f6a <SecurityAccessNegativeResponseMessage+0x42>
 8000f54:	e00d      	b.n	8000f72 <SecurityAccessNegativeResponseMessage+0x4a>
		case 0x12:
			Data[2] = 0x12;	// sub function not supported
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	2212      	movs	r2, #18
 8000f5c:	701a      	strb	r2, [r3, #0]
			break;
 8000f5e:	e00d      	b.n	8000f7c <SecurityAccessNegativeResponseMessage+0x54>
		case 0x35:
			Data[2] = 0x35;	// invalid key
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3302      	adds	r3, #2
 8000f64:	2235      	movs	r2, #53	; 0x35
 8000f66:	701a      	strb	r2, [r3, #0]
			break;
 8000f68:	e008      	b.n	8000f7c <SecurityAccessNegativeResponseMessage+0x54>
		case 0x13:
			Data[2] = 0x13;	// incorrect message length or invalid format
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	2213      	movs	r2, #19
 8000f70:	701a      	strb	r2, [r3, #0]
		default:
			Data[2] = 0x33;	//securityAccessDenied
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3302      	adds	r3, #2
 8000f76:	2233      	movs	r2, #51	; 0x33
 8000f78:	701a      	strb	r2, [r3, #0]
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <HandleSID22>:
void HandleSID22(){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint16_t DID = get_DID(ECU_RxData);
 8000f8e:	4816      	ldr	r0, [pc, #88]	; (8000fe8 <HandleSID22+0x60>)
 8000f90:	f7ff fe29 	bl	8000be6 <get_DID>
 8000f94:	4603      	mov	r3, r0
 8000f96:	80fb      	strh	r3, [r7, #6]
	if (DID == 0xF002){
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	f24f 0202 	movw	r2, #61442	; 0xf002
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d113      	bne.n	8000fca <HandleSID22+0x42>
		is_run_timer = true;
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HandleSID22+0x64>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8000fa8:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <HandleSID22+0x68>)
 8000faa:	f000 ffc5 	bl	8001f38 <HAL_ADC_Start>
		HAL_Delay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f000 ff5a 	bl	8001e68 <HAL_Delay>
		uint8_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000fb4:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <HandleSID22+0x68>)
 8000fb6:	f001 f891 	bl	80020dc <HAL_ADC_GetValue>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	717b      	strb	r3, [r7, #5]
		ReadDataByIdentifierResponseFrame(ECU_TxData, adc_value);
 8000fbe:	797b      	ldrb	r3, [r7, #5]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HandleSID22+0x6c>)
 8000fc4:	f7ff fe92 	bl	8000cec <ReadDataByIdentifierResponseFrame>
 8000fc8:	e003      	b.n	8000fd2 <HandleSID22+0x4a>
	}
	else{
		SecurityAccessNegativeResponseMessage(ECU_TxData, 0x12);
 8000fca:	2112      	movs	r1, #18
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HandleSID22+0x6c>)
 8000fce:	f7ff ffab 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
	}
	HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HandleSID22+0x70>)
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HandleSID22+0x6c>)
 8000fd6:	4909      	ldr	r1, [pc, #36]	; (8000ffc <HandleSID22+0x74>)
 8000fd8:	4809      	ldr	r0, [pc, #36]	; (8001000 <HandleSID22+0x78>)
 8000fda:	f001 fccb 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000234 	.word	0x20000234
 8000fec:	2000024d 	.word	0x2000024d
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	2000022c 	.word	0x2000022c
 8000ff8:	2000023c 	.word	0x2000023c
 8000ffc:	200001f8 	.word	0x200001f8
 8001000:	200000fc 	.word	0x200000fc

08001004 <HandleSID27>:
void HandleSID27(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	uint8_t SBF = get_sub_function(ECU_RxData);
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <HandleSID27+0x84>)
 800100c:	f7ff fe04 	bl	8000c18 <get_sub_function>
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
	if (SBF == 0x01){
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d103      	bne.n	8001022 <HandleSID27+0x1e>
		securityAccessServiceSeedResponseFrame(ECU_TxData);
 800101a:	481c      	ldr	r0, [pc, #112]	; (800108c <HandleSID27+0x88>)
 800101c:	f7ff fed2 	bl	8000dc4 <securityAccessServiceSeedResponseFrame>
 8001020:	e027      	b.n	8001072 <HandleSID27+0x6e>
	}
	else if (SBF == 0x02){
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d120      	bne.n	800106a <HandleSID27+0x66>
		if (is_accept_key(ECU_RxData, ECU_store_seed) == true){
 8001028:	4919      	ldr	r1, [pc, #100]	; (8001090 <HandleSID27+0x8c>)
 800102a:	4817      	ldr	r0, [pc, #92]	; (8001088 <HandleSID27+0x84>)
 800102c:	f7ff fe16 	bl	8000c5c <is_accept_key>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d114      	bne.n	8001060 <HandleSID27+0x5c>
			if (is_ECU_unlock == true){
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HandleSID27+0x90>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d106      	bne.n	800104c <HandleSID27+0x48>
				is_ECU_unlock = false;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HandleSID27+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
				securityAccessSendKeyResponseFrame(ECU_TxData);
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <HandleSID27+0x88>)
 8001046:	f7ff ff4b 	bl	8000ee0 <securityAccessSendKeyResponseFrame>
 800104a:	e012      	b.n	8001072 <HandleSID27+0x6e>
			}
			else{
				is_ECU_unlock = true;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HandleSID27+0x90>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
				is_run_timer = true;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HandleSID27+0x94>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
				securityAccessSendKeyResponseFrame(ECU_TxData);
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <HandleSID27+0x88>)
 800105a:	f7ff ff41 	bl	8000ee0 <securityAccessSendKeyResponseFrame>
 800105e:	e008      	b.n	8001072 <HandleSID27+0x6e>
			}
		}
		else {
			SecurityAccessNegativeResponseMessage(ECU_TxData, 0x35);// invalid key
 8001060:	2135      	movs	r1, #53	; 0x35
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <HandleSID27+0x88>)
 8001064:	f7ff ff60 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
 8001068:	e003      	b.n	8001072 <HandleSID27+0x6e>
		}
	}
	else SecurityAccessNegativeResponseMessage(ECU_TxData, 0x12);	// invalid sbf
 800106a:	2112      	movs	r1, #18
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <HandleSID27+0x88>)
 800106e:	f7ff ff5b 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
	HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HandleSID27+0x98>)
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <HandleSID27+0x88>)
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <HandleSID27+0x9c>)
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <HandleSID27+0xa0>)
 800107a:	f001 fc7b 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000234 	.word	0x20000234
 800108c:	2000022c 	.word	0x2000022c
 8001090:	20000240 	.word	0x20000240
 8001094:	2000024c 	.word	0x2000024c
 8001098:	2000024d 	.word	0x2000024d
 800109c:	2000023c 	.word	0x2000023c
 80010a0:	200001f8 	.word	0x200001f8
 80010a4:	200000fc 	.word	0x200000fc

080010a8 <HandleSID2E>:
void HandleSID2E(){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint16_t DID = get_DID(ECU_RxData);
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <HandleSID2E+0x50>)
 80010b0:	f7ff fd99 	bl	8000be6 <get_DID>
 80010b4:	4603      	mov	r3, r0
 80010b6:	80fb      	strh	r3, [r7, #6]
	if (DID == 0xF112){
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	f24f 1212 	movw	r2, #61714	; 0xf112
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10b      	bne.n	80010da <HandleSID2E+0x32>
		store_joystick_value(ECU_RxData[4]);
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HandleSID2E+0x50>)
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fd54 	bl	8000b74 <store_joystick_value>
		WriteDataByIdentifierResponseFrame(ECU_TxData);
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <HandleSID2E+0x54>)
 80010ce:	f7ff fe4b 	bl	8000d68 <WriteDataByIdentifierResponseFrame>
		is_run_timer = true;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HandleSID2E+0x58>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e003      	b.n	80010e2 <HandleSID2E+0x3a>
	}
	else{
		SecurityAccessNegativeResponseMessage(ECU_TxData, 0x12);
 80010da:	2112      	movs	r1, #18
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HandleSID2E+0x54>)
 80010de:	f7ff ff23 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
	}
	HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HandleSID2E+0x5c>)
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HandleSID2E+0x54>)
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <HandleSID2E+0x60>)
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <HandleSID2E+0x64>)
 80010ea:	f001 fc43 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000234 	.word	0x20000234
 80010fc:	2000022c 	.word	0x2000022c
 8001100:	2000024d 	.word	0x2000024d
 8001104:	2000023c 	.word	0x2000023c
 8001108:	200001f8 	.word	0x200001f8
 800110c:	200000fc 	.word	0x200000fc

08001110 <HandleSID67>:
void HandleSID67(){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint8_t SBF = get_sub_function(tester_RxData);
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <HandleSID67+0x64>)
 8001118:	f7ff fd7e 	bl	8000c18 <get_sub_function>
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
	if (SBF == 0x01){
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10a      	bne.n	800113c <HandleSID67+0x2c>
		securityAccessSendKeyRequestFrame(tester_TxData, tester_RxData);
 8001126:	4913      	ldr	r1, [pc, #76]	; (8001174 <HandleSID67+0x64>)
 8001128:	4813      	ldr	r0, [pc, #76]	; (8001178 <HandleSID67+0x68>)
 800112a:	f7ff fe93 	bl	8000e54 <securityAccessSendKeyRequestFrame>
		HAL_CAN_AddTxMessage(&hcan1, &tester_TxHeader, tester_TxData, &tester_TxMailbox);
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <HandleSID67+0x6c>)
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HandleSID67+0x68>)
 8001132:	4913      	ldr	r1, [pc, #76]	; (8001180 <HandleSID67+0x70>)
 8001134:	4813      	ldr	r0, [pc, #76]	; (8001184 <HandleSID67+0x74>)
 8001136:	f001 fc1d 	bl	8002974 <HAL_CAN_AddTxMessage>
		else{
			printf("Locked\n\r");
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
		}
	}
}
 800113a:	e017      	b.n	800116c <HandleSID67+0x5c>
	else if (SBF == 0x02){
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d114      	bne.n	800116c <HandleSID67+0x5c>
		if (tester_RxData[3] == false){
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HandleSID67+0x64>)
 8001144:	78db      	ldrb	r3, [r3, #3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d108      	bne.n	800115c <HandleSID67+0x4c>
			printf("Unlocked\n\r");
 800114a:	480f      	ldr	r0, [pc, #60]	; (8001188 <HandleSID67+0x78>)
 800114c:	f004 f850 	bl	80051f0 <iprintf>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	2101      	movs	r1, #1
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <HandleSID67+0x7c>)
 8001156:	f002 fb0b 	bl	8003770 <HAL_GPIO_WritePin>
}
 800115a:	e007      	b.n	800116c <HandleSID67+0x5c>
			printf("Locked\n\r");
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <HandleSID67+0x80>)
 800115e:	f004 f847 	bl	80051f0 <iprintf>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2101      	movs	r1, #1
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <HandleSID67+0x7c>)
 8001168:	f002 fb02 	bl	8003770 <HAL_GPIO_WritePin>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200001ec 	.word	0x200001ec
 8001178:	200001e4 	.word	0x200001e4
 800117c:	200001f4 	.word	0x200001f4
 8001180:	200001b0 	.word	0x200001b0
 8001184:	200000d4 	.word	0x200000d4
 8001188:	08006124 	.word	0x08006124
 800118c:	40020400 	.word	0x40020400
 8001190:	08006130 	.word	0x08006130

08001194 <HandleSID62>:
void HandleSID62(){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint16_t DID = get_DID(tester_RxData);
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HandleSID62+0x34>)
 800119c:	f7ff fd23 	bl	8000be6 <get_DID>
 80011a0:	4603      	mov	r3, r0
 80011a2:	80fb      	strh	r3, [r7, #6]
	if (DID == 0xF002){
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	f24f 0202 	movw	r2, #61442	; 0xf002
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d107      	bne.n	80011be <HandleSID62+0x2a>
		uint8_t adc_value = tester_RxData[4];
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HandleSID62+0x34>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	717b      	strb	r3, [r7, #5]
		printf("ADC value: %x\n\r", adc_value);
 80011b4:	797b      	ldrb	r3, [r7, #5]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <HandleSID62+0x38>)
 80011ba:	f004 f819 	bl	80051f0 <iprintf>
	}
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001ec 	.word	0x200001ec
 80011cc:	0800613c 	.word	0x0800613c

080011d0 <HandleSID6E>:
void HandleSID6E(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	uint16_t DID = get_DID(tester_RxData);
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <HandleSID6E+0x34>)
 80011d8:	f7ff fd05 	bl	8000be6 <get_DID>
 80011dc:	4603      	mov	r3, r0
 80011de:	80fb      	strh	r3, [r7, #6]
	if (DID == 0xF112){
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	f24f 1212 	movw	r2, #61714	; 0xf112
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d108      	bne.n	80011fc <HandleSID6E+0x2c>
		printf("Written joystick position\n\r");
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <HandleSID6E+0x38>)
 80011ec:	f004 f800 	bl	80051f0 <iprintf>
		printf("joystick position: %x\n\r", joystick);
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HandleSID6E+0x3c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	4806      	ldr	r0, [pc, #24]	; (8001210 <HandleSID6E+0x40>)
 80011f8:	f003 fffa 	bl	80051f0 <iprintf>
	}
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200001ec 	.word	0x200001ec
 8001208:	0800614c 	.word	0x0800614c
 800120c:	20000248 	.word	0x20000248
 8001210:	08006168 	.word	0x08006168

08001214 <HandleSID7F>:
void HandleSID7F(){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	uint8_t NRC = get_NRC(tester_RxData);
 800121a:	4812      	ldr	r0, [pc, #72]	; (8001264 <HandleSID7F+0x50>)
 800121c:	f7ff fd41 	bl	8000ca2 <get_NRC>
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
	if (NRC == 0x12){
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b12      	cmp	r3, #18
 8001228:	d103      	bne.n	8001232 <HandleSID7F+0x1e>
		printf("subFunctionNotSupported\n\r");
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <HandleSID7F+0x54>)
 800122c:	f003 ffe0 	bl	80051f0 <iprintf>
		printf("incorrectMessageLengthOrInvalidFormat\n\r");
	}
	else if (NRC == 0x33){
		printf("securityAccessDenied\n\r");
	}
}
 8001230:	e013      	b.n	800125a <HandleSID7F+0x46>
	else if (NRC == 0x35){
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b35      	cmp	r3, #53	; 0x35
 8001236:	d103      	bne.n	8001240 <HandleSID7F+0x2c>
		printf("invalidKey\n\r");
 8001238:	480c      	ldr	r0, [pc, #48]	; (800126c <HandleSID7F+0x58>)
 800123a:	f003 ffd9 	bl	80051f0 <iprintf>
}
 800123e:	e00c      	b.n	800125a <HandleSID7F+0x46>
	else if (NRC == 0x13){
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b13      	cmp	r3, #19
 8001244:	d103      	bne.n	800124e <HandleSID7F+0x3a>
		printf("incorrectMessageLengthOrInvalidFormat\n\r");
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <HandleSID7F+0x5c>)
 8001248:	f003 ffd2 	bl	80051f0 <iprintf>
}
 800124c:	e005      	b.n	800125a <HandleSID7F+0x46>
	else if (NRC == 0x33){
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b33      	cmp	r3, #51	; 0x33
 8001252:	d102      	bne.n	800125a <HandleSID7F+0x46>
		printf("securityAccessDenied\n\r");
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <HandleSID7F+0x60>)
 8001256:	f003 ffcb 	bl	80051f0 <iprintf>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001ec 	.word	0x200001ec
 8001268:	08006180 	.word	0x08006180
 800126c:	0800619c 	.word	0x0800619c
 8001270:	080061ac 	.word	0x080061ac
 8001274:	080061d4 	.word	0x080061d4

08001278 <Service22>:
void Service22(){
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	ReadDataByIdentifierRequestFrame(tester_TxData);
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <Service22+0x1c>)
 800127e:	f7ff fd1c 	bl	8000cba <ReadDataByIdentifierRequestFrame>
	HAL_CAN_AddTxMessage(&hcan1, &tester_TxHeader, tester_TxData, &tester_TxMailbox);
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <Service22+0x20>)
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <Service22+0x1c>)
 8001286:	4905      	ldr	r1, [pc, #20]	; (800129c <Service22+0x24>)
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <Service22+0x28>)
 800128a:	f001 fb73 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200001e4 	.word	0x200001e4
 8001298:	200001f4 	.word	0x200001f4
 800129c:	200001b0 	.word	0x200001b0
 80012a0:	200000d4 	.word	0x200000d4

080012a4 <Service27>:
void Service27(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	securityAccessServiceSeedRequestFrame(tester_TxData);
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <Service27+0x1c>)
 80012aa:	f7ff fd76 	bl	8000d9a <securityAccessServiceSeedRequestFrame>
	HAL_CAN_AddTxMessage(&hcan1, &tester_TxHeader, tester_TxData, &tester_TxMailbox);
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <Service27+0x20>)
 80012b0:	4a03      	ldr	r2, [pc, #12]	; (80012c0 <Service27+0x1c>)
 80012b2:	4905      	ldr	r1, [pc, #20]	; (80012c8 <Service27+0x24>)
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <Service27+0x28>)
 80012b6:	f001 fb5d 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001e4 	.word	0x200001e4
 80012c4:	200001f4 	.word	0x200001f4
 80012c8:	200001b0 	.word	0x200001b0
 80012cc:	200000d4 	.word	0x200000d4

080012d0 <Service2E>:
void Service2E(uint8_t joystick_position){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	WriteDataByIdentifierRequestFrame(tester_TxData, joystick_position);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <Service2E+0x28>)
 80012e0:	f7ff fd23 	bl	8000d2a <WriteDataByIdentifierRequestFrame>
	HAL_CAN_AddTxMessage(&hcan1, &tester_TxHeader, tester_TxData, &tester_TxMailbox);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <Service2E+0x2c>)
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <Service2E+0x28>)
 80012e8:	4905      	ldr	r1, [pc, #20]	; (8001300 <Service2E+0x30>)
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <Service2E+0x34>)
 80012ec:	f001 fb42 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001e4 	.word	0x200001e4
 80012fc:	200001f4 	.word	0x200001f4
 8001300:	200001b0 	.word	0x200001b0
 8001304:	200000d4 	.word	0x200000d4

08001308 <CheckAndHandleService22>:
void CheckAndHandleService22(){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	if (flag_user_key == true){
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <CheckAndHandleService22+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d104      	bne.n	800131e <CheckAndHandleService22+0x16>
		flag_user_key = false;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <CheckAndHandleService22+0x1c>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
		Service22();
 800131a:	f7ff ffad 	bl	8001278 <Service22>
	}
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000252 	.word	0x20000252

08001328 <CheckAndHandleService27>:
void CheckAndHandleService27(){
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if (flag_wake_up_key == true){
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <CheckAndHandleService27+0x1c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d104      	bne.n	800133e <CheckAndHandleService27+0x16>
		flag_wake_up_key = false;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <CheckAndHandleService27+0x1c>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
		Service27();
 800133a:	f7ff ffb3 	bl	80012a4 <Service27>
	}
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000251 	.word	0x20000251

08001348 <CheckAndHandleService2E>:
void CheckAndHandleService2E(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if (flag_left_key == true){
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <CheckAndHandleService2E+0x48>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <CheckAndHandleService2E+0x1a>
		flag_left_key = false;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <CheckAndHandleService2E+0x48>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
		Service2E(LEFT);
 800135a:	20aa      	movs	r0, #170	; 0xaa
 800135c:	f7ff ffb8 	bl	80012d0 <Service2E>
	}
	else if (flag_right_key == true){
		flag_right_key = false;
		Service2E(RIGHT);
	}
}
 8001360:	e014      	b.n	800138c <CheckAndHandleService2E+0x44>
	else if (flag_mid_key == true){
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <CheckAndHandleService2E+0x4c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d106      	bne.n	8001378 <CheckAndHandleService2E+0x30>
		flag_mid_key = false;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <CheckAndHandleService2E+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		Service2E(MID);
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ffad 	bl	80012d0 <Service2E>
}
 8001376:	e009      	b.n	800138c <CheckAndHandleService2E+0x44>
	else if (flag_right_key == true){
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <CheckAndHandleService2E+0x50>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <CheckAndHandleService2E+0x44>
		flag_right_key = false;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <CheckAndHandleService2E+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
		Service2E(RIGHT);
 8001386:	20ff      	movs	r0, #255	; 0xff
 8001388:	f7ff ffa2 	bl	80012d0 <Service2E>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000253 	.word	0x20000253
 8001394:	20000255 	.word	0x20000255
 8001398:	20000254 	.word	0x20000254

0800139c <CheckAndHandleTesterCANFIFO0>:
void CheckAndHandleTesterCANFIFO0(){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	if (is_get_fifo0 == true){
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <CheckAndHandleTesterCANFIFO0+0x68>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d128      	bne.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
		is_get_fifo0 = false;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <CheckAndHandleTesterCANFIFO0+0x68>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
		uint8_t PCI = get_PCI(tester_RxData[0]);
 80013b0:	4b15      	ldr	r3, [pc, #84]	; (8001408 <CheckAndHandleTesterCANFIFO0+0x6c>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fbed 	bl	8000b94 <get_PCI>
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
		if (PCI == 0x00){
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11b      	bne.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
			uint8_t SID = get_SID(tester_RxData);
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <CheckAndHandleTesterCANFIFO0+0x6c>)
 80013c6:	f7ff fc02 	bl	8000bce <get_SID>
 80013ca:	4603      	mov	r3, r0
 80013cc:	71bb      	strb	r3, [r7, #6]
			if (SID == 0x62) HandleSID62();
 80013ce:	79bb      	ldrb	r3, [r7, #6]
 80013d0:	2b62      	cmp	r3, #98	; 0x62
 80013d2:	d102      	bne.n	80013da <CheckAndHandleTesterCANFIFO0+0x3e>
 80013d4:	f7ff fede 	bl	8001194 <HandleSID62>
			else if (SID == 0x67) HandleSID67();
			else if (SID == 0x6E) HandleSID6E();
			else if (SID == 0x7F) HandleSID7F();
		}
	}
}
 80013d8:	e010      	b.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
			else if (SID == 0x67) HandleSID67();
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	2b67      	cmp	r3, #103	; 0x67
 80013de:	d102      	bne.n	80013e6 <CheckAndHandleTesterCANFIFO0+0x4a>
 80013e0:	f7ff fe96 	bl	8001110 <HandleSID67>
}
 80013e4:	e00a      	b.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
			else if (SID == 0x6E) HandleSID6E();
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	2b6e      	cmp	r3, #110	; 0x6e
 80013ea:	d102      	bne.n	80013f2 <CheckAndHandleTesterCANFIFO0+0x56>
 80013ec:	f7ff fef0 	bl	80011d0 <HandleSID6E>
}
 80013f0:	e004      	b.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
			else if (SID == 0x7F) HandleSID7F();
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	2b7f      	cmp	r3, #127	; 0x7f
 80013f6:	d101      	bne.n	80013fc <CheckAndHandleTesterCANFIFO0+0x60>
 80013f8:	f7ff ff0c 	bl	8001214 <HandleSID7F>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000250 	.word	0x20000250
 8001408:	200001ec 	.word	0x200001ec

0800140c <CheckAndHandleECUCANFIFO1>:
void CheckAndHandleECUCANFIFO1(){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	if (is_get_fifo1 == true){
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <CheckAndHandleECUCANFIFO1+0x104>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d175      	bne.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
		is_get_fifo1 = false;
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <CheckAndHandleECUCANFIFO1+0x104>)
 800141c:	2200      	movs	r2, #0
 800141e:	701a      	strb	r2, [r3, #0]
		uint8_t PCI = get_PCI(ECU_RxData[0]);
 8001420:	4b3c      	ldr	r3, [pc, #240]	; (8001514 <CheckAndHandleECUCANFIFO1+0x108>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fbb5 	bl	8000b94 <get_PCI>
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
		uint8_t LEN = get_size(ECU_RxData[0]);
 800142e:	4b39      	ldr	r3, [pc, #228]	; (8001514 <CheckAndHandleECUCANFIFO1+0x108>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fbbc 	bl	8000bb0 <get_size>
 8001438:	4603      	mov	r3, r0
 800143a:	71bb      	strb	r3, [r7, #6]
		if (PCI == 0x00){
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d161      	bne.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
			uint8_t SID = get_SID(ECU_RxData);
 8001442:	4834      	ldr	r0, [pc, #208]	; (8001514 <CheckAndHandleECUCANFIFO1+0x108>)
 8001444:	f7ff fbc3 	bl	8000bce <get_SID>
 8001448:	4603      	mov	r3, r0
 800144a:	717b      	strb	r3, [r7, #5]
			if (is_ECU_unlock == true){
 800144c:	4b32      	ldr	r3, [pc, #200]	; (8001518 <CheckAndHandleECUCANFIFO1+0x10c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d133      	bne.n	80014bc <CheckAndHandleECUCANFIFO1+0xb0>
				if (SID == 0x22){
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	2b22      	cmp	r3, #34	; 0x22
 8001458:	d110      	bne.n	800147c <CheckAndHandleECUCANFIFO1+0x70>
					if (LEN == 0x03) HandleSID22();
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d102      	bne.n	8001466 <CheckAndHandleECUCANFIFO1+0x5a>
 8001460:	f7ff fd92 	bl	8000f88 <HandleSID22>
					HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
				}
			}
		}
	}
}
 8001464:	e04f      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
						SecurityAccessNegativeResponseMessage(ECU_TxData, 0x13);
 8001466:	2113      	movs	r1, #19
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 800146a:	f7ff fd5d 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
						HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 800146e:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <CheckAndHandleECUCANFIFO1+0x114>)
 8001470:	4a2a      	ldr	r2, [pc, #168]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 8001472:	492c      	ldr	r1, [pc, #176]	; (8001524 <CheckAndHandleECUCANFIFO1+0x118>)
 8001474:	482c      	ldr	r0, [pc, #176]	; (8001528 <CheckAndHandleECUCANFIFO1+0x11c>)
 8001476:	f001 fa7d 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 800147a:	e044      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
				else if (SID == 0x2E) {
 800147c:	797b      	ldrb	r3, [r7, #5]
 800147e:	2b2e      	cmp	r3, #46	; 0x2e
 8001480:	d110      	bne.n	80014a4 <CheckAndHandleECUCANFIFO1+0x98>
					if (LEN == 0x04) HandleSID2E();
 8001482:	79bb      	ldrb	r3, [r7, #6]
 8001484:	2b04      	cmp	r3, #4
 8001486:	d102      	bne.n	800148e <CheckAndHandleECUCANFIFO1+0x82>
 8001488:	f7ff fe0e 	bl	80010a8 <HandleSID2E>
}
 800148c:	e03b      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
						SecurityAccessNegativeResponseMessage(ECU_TxData, 0x13);
 800148e:	2113      	movs	r1, #19
 8001490:	4822      	ldr	r0, [pc, #136]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 8001492:	f7ff fd49 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
						HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <CheckAndHandleECUCANFIFO1+0x114>)
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 800149a:	4922      	ldr	r1, [pc, #136]	; (8001524 <CheckAndHandleECUCANFIFO1+0x118>)
 800149c:	4822      	ldr	r0, [pc, #136]	; (8001528 <CheckAndHandleECUCANFIFO1+0x11c>)
 800149e:	f001 fa69 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 80014a2:	e030      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
				else if (SID == 0x27){
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	2b27      	cmp	r3, #39	; 0x27
 80014a8:	d12d      	bne.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
					if (LEN == 0x07 || LEN == 0x02) HandleSID27();
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	2b07      	cmp	r3, #7
 80014ae:	d002      	beq.n	80014b6 <CheckAndHandleECUCANFIFO1+0xaa>
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d127      	bne.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
 80014b6:	f7ff fda5 	bl	8001004 <HandleSID27>
}
 80014ba:	e024      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
			else if (is_ECU_unlock == false){
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <CheckAndHandleECUCANFIFO1+0x10c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d120      	bne.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
				if (SID == 0x27){
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	2b27      	cmp	r3, #39	; 0x27
 80014c8:	d113      	bne.n	80014f2 <CheckAndHandleECUCANFIFO1+0xe6>
					if (LEN == 0x07 || LEN == 0x02) HandleSID27();
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d002      	beq.n	80014d6 <CheckAndHandleECUCANFIFO1+0xca>
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d102      	bne.n	80014dc <CheckAndHandleECUCANFIFO1+0xd0>
 80014d6:	f7ff fd95 	bl	8001004 <HandleSID27>
}
 80014da:	e014      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
						SecurityAccessNegativeResponseMessage(ECU_TxData, 0x13);
 80014dc:	2113      	movs	r1, #19
 80014de:	480f      	ldr	r0, [pc, #60]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 80014e0:	f7ff fd22 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
						HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <CheckAndHandleECUCANFIFO1+0x114>)
 80014e6:	4a0d      	ldr	r2, [pc, #52]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 80014e8:	490e      	ldr	r1, [pc, #56]	; (8001524 <CheckAndHandleECUCANFIFO1+0x118>)
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <CheckAndHandleECUCANFIFO1+0x11c>)
 80014ec:	f001 fa42 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 80014f0:	e009      	b.n	8001506 <CheckAndHandleECUCANFIFO1+0xfa>
					SecurityAccessNegativeResponseMessage(ECU_TxData, 0x33);
 80014f2:	2133      	movs	r1, #51	; 0x33
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 80014f6:	f7ff fd17 	bl	8000f28 <SecurityAccessNegativeResponseMessage>
					HAL_CAN_AddTxMessage(&hcan2, &ECU_TxHeader, ECU_TxData, &ECU_TxMailbox);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <CheckAndHandleECUCANFIFO1+0x114>)
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <CheckAndHandleECUCANFIFO1+0x110>)
 80014fe:	4909      	ldr	r1, [pc, #36]	; (8001524 <CheckAndHandleECUCANFIFO1+0x118>)
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <CheckAndHandleECUCANFIFO1+0x11c>)
 8001502:	f001 fa37 	bl	8002974 <HAL_CAN_AddTxMessage>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000024e 	.word	0x2000024e
 8001514:	20000234 	.word	0x20000234
 8001518:	2000024c 	.word	0x2000024c
 800151c:	2000022c 	.word	0x2000022c
 8001520:	2000023c 	.word	0x2000023c
 8001524:	200001f8 	.word	0x200001f8
 8001528:	200000fc 	.word	0x200000fc

0800152c <CheckOverTime>:
void CheckOverTime(){
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	if (is_over_time == true){
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <CheckOverTime+0x38>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d113      	bne.n	8001560 <CheckOverTime+0x34>
		is_over_time = false;
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <CheckOverTime+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
		is_run_timer = false;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <CheckOverTime+0x3c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		count = 0;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <CheckOverTime+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	801a      	strh	r2, [r3, #0]
		is_ECU_unlock = false;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <CheckOverTime+0x44>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <CheckOverTime+0x48>)
 8001556:	f002 f90b 	bl	8003770 <HAL_GPIO_WritePin>
		printf("System's locked\n\r");
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <CheckOverTime+0x4c>)
 800155c:	f003 fe48 	bl	80051f0 <iprintf>
	}
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000024f 	.word	0x2000024f
 8001568:	2000024d 	.word	0x2000024d
 800156c:	2000024a 	.word	0x2000024a
 8001570:	2000024c 	.word	0x2000024c
 8001574:	40020400 	.word	0x40020400
 8001578:	080061ec 	.word	0x080061ec

0800157c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
	UNUSED(GPIO_Pin);
	if(GPIO_Pin == WakeUp_Pin){
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10e      	bne.n	80015aa <HAL_GPIO_EXTI_Callback+0x2e>
		printf("Wake up\n\r");
 800158c:	482d      	ldr	r0, [pc, #180]	; (8001644 <HAL_GPIO_EXTI_Callback+0xc8>)
 800158e:	f003 fe2f 	bl	80051f0 <iprintf>
		flag_wake_up_key = true;
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(WakeUp_GPIO_Port, WakeUp_Pin) == GPIO_PIN_RESET);
 8001598:	bf00      	nop
 800159a:	2101      	movs	r1, #1
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <HAL_GPIO_EXTI_Callback+0xd0>)
 800159e:	f002 f8cf 	bl	8003740 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f8      	beq.n	800159a <HAL_GPIO_EXTI_Callback+0x1e>
		while(HAL_GPIO_ReadPin(MID_GPIO_Port, MID_Pin) == GPIO_PIN_RESET);
	}
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015a8:	e048      	b.n	800163c <HAL_GPIO_EXTI_Callback+0xc0>
	else if (GPIO_Pin == USER_Pin){
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d10e      	bne.n	80015ce <HAL_GPIO_EXTI_Callback+0x52>
		printf("User\n\r");
 80015b0:	4827      	ldr	r0, [pc, #156]	; (8001650 <HAL_GPIO_EXTI_Callback+0xd4>)
 80015b2:	f003 fe1d 	bl	80051f0 <iprintf>
		flag_user_key = true;
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_GPIO_EXTI_Callback+0xd8>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(USER_GPIO_Port, USER_Pin) == GPIO_PIN_RESET);
 80015bc:	bf00      	nop
 80015be:	2102      	movs	r1, #2
 80015c0:	4822      	ldr	r0, [pc, #136]	; (800164c <HAL_GPIO_EXTI_Callback+0xd0>)
 80015c2:	f002 f8bd 	bl	8003740 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f8      	beq.n	80015be <HAL_GPIO_EXTI_Callback+0x42>
}
 80015cc:	e036      	b.n	800163c <HAL_GPIO_EXTI_Callback+0xc0>
	else if (GPIO_Pin == LEFT_Pin){
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d10e      	bne.n	80015f2 <HAL_GPIO_EXTI_Callback+0x76>
		printf("Left\n\r");
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <HAL_GPIO_EXTI_Callback+0xdc>)
 80015d6:	f003 fe0b 	bl	80051f0 <iprintf>
		flag_left_key = true;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_GPIO_EXTI_Callback+0xe0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin) == GPIO_PIN_RESET);
 80015e0:	bf00      	nop
 80015e2:	2110      	movs	r1, #16
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <HAL_GPIO_EXTI_Callback+0xe4>)
 80015e6:	f002 f8ab 	bl	8003740 <HAL_GPIO_ReadPin>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <HAL_GPIO_EXTI_Callback+0x66>
}
 80015f0:	e024      	b.n	800163c <HAL_GPIO_EXTI_Callback+0xc0>
	else if (GPIO_Pin == RIGHT_Pin){
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	2b80      	cmp	r3, #128	; 0x80
 80015f6:	d10e      	bne.n	8001616 <HAL_GPIO_EXTI_Callback+0x9a>
		printf("Right\n\r");
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <HAL_GPIO_EXTI_Callback+0xe8>)
 80015fa:	f003 fdf9 	bl	80051f0 <iprintf>
		flag_right_key = true;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_EXTI_Callback+0xec>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin) == GPIO_PIN_RESET);
 8001604:	bf00      	nop
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	4815      	ldr	r0, [pc, #84]	; (8001660 <HAL_GPIO_EXTI_Callback+0xe4>)
 800160a:	f002 f899 	bl	8003740 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f8      	beq.n	8001606 <HAL_GPIO_EXTI_Callback+0x8a>
}
 8001614:	e012      	b.n	800163c <HAL_GPIO_EXTI_Callback+0xc0>
	else if (GPIO_Pin == MID_Pin){
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800161c:	d10e      	bne.n	800163c <HAL_GPIO_EXTI_Callback+0xc0>
		printf("Mid\n\r");
 800161e:	4813      	ldr	r0, [pc, #76]	; (800166c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001620:	f003 fde6 	bl	80051f0 <iprintf>
		flag_mid_key = true;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(MID_GPIO_Port, MID_Pin) == GPIO_PIN_RESET);
 800162a:	bf00      	nop
 800162c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001632:	f002 f885 	bl	8003740 <HAL_GPIO_ReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f7      	beq.n	800162c <HAL_GPIO_EXTI_Callback+0xb0>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08006200 	.word	0x08006200
 8001648:	20000251 	.word	0x20000251
 800164c:	40020000 	.word	0x40020000
 8001650:	0800620c 	.word	0x0800620c
 8001654:	20000252 	.word	0x20000252
 8001658:	08006214 	.word	0x08006214
 800165c:	20000253 	.word	0x20000253
 8001660:	40020800 	.word	0x40020800
 8001664:	0800621c 	.word	0x0800621c
 8001668:	20000254 	.word	0x20000254
 800166c:	08006224 	.word	0x08006224
 8001670:	20000255 	.word	0x20000255

08001674 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &tester_RxHeader, tester_RxData);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001680:	2100      	movs	r1, #0
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f001 fa51 	bl	8002b2a <HAL_CAN_GetRxMessage>
	if (tester_RxHeader.DLC == data_length){
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d102      	bne.n	8001696 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		is_get_fifo0 = true;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
	}
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001ec 	.word	0x200001ec
 80016a4:	200001c8 	.word	0x200001c8
 80016a8:	20000250 	.word	0x20000250

080016ac <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &ECU_RxHeader, ECU_RxData);
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f001 fa35 	bl	8002b2a <HAL_CAN_GetRxMessage>
	if (ECU_RxHeader.DLC == data_length){
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d108      	bne.n	80016da <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		is_get_fifo1 = true;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
		is_run_timer = false;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
		count = 0;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	801a      	strh	r2, [r3, #0]
	}
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000234 	.word	0x20000234
 80016e8:	20000210 	.word	0x20000210
 80016ec:	2000024e 	.word	0x2000024e
 80016f0:	2000024d 	.word	0x2000024d
 80016f4:	2000024a 	.word	0x2000024a

080016f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d138      	bne.n	800177c <HAL_TIM_PeriodElapsedCallback+0x84>
		if (is_run_timer == true){
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d131      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x7e>
			count++;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800171c:	801a      	strh	r2, [r3, #0]
			if (count % 1000 == 0) printf("%d\n\r", count);
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001724:	fba2 1203 	umull	r1, r2, r2, r3
 8001728:	0992      	lsrs	r2, r2, #6
 800172a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800172e:	fb01 f202 	mul.w	r2, r1, r2
 8001732:	1a9b      	subs	r3, r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d105      	bne.n	8001746 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800173a:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	4619      	mov	r1, r3
 8001740:	4814      	ldr	r0, [pc, #80]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001742:	f003 fd55 	bl	80051f0 <iprintf>
			if (count == over_time) {
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	f242 7210 	movw	r2, #10000	; 0x2710
 800174e:	4293      	cmp	r3, r2
 8001750:	d114      	bne.n	800177c <HAL_TIM_PeriodElapsedCallback+0x84>
				is_over_time = true;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
				count %= over_time;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800175e:	fba2 1203 	umull	r1, r2, r2, r3
 8001762:	0b52      	lsrs	r2, r2, #13
 8001764:	f242 7110 	movw	r1, #10000	; 0x2710
 8001768:	fb01 f202 	mul.w	r2, r1, r2
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001772:	801a      	strh	r2, [r3, #0]
			}
		}
		else count = zero;
	}
}
 8001774:	e002      	b.n	800177c <HAL_TIM_PeriodElapsedCallback+0x84>
		else count = zero;
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001778:	2200      	movs	r2, #0
 800177a:	801a      	strh	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40000400 	.word	0x40000400
 8001788:	2000024d 	.word	0x2000024d
 800178c:	2000024a 	.word	0x2000024a
 8001790:	10624dd3 	.word	0x10624dd3
 8001794:	0800622c 	.word	0x0800622c
 8001798:	2000024f 	.word	0x2000024f
 800179c:	d1b71759 	.word	0xd1b71759

080017a0 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80017a8:	1d39      	adds	r1, r7, #4
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	2201      	movs	r2, #1
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <__io_putchar+0x20>)
 80017b0:	f003 f977 	bl	8004aa2 <HAL_UART_Transmit>
  return ch;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000016c 	.word	0x2000016c

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_MspInit+0x4c>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_MspInit+0x4c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_MspInit+0x4c>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_MspInit+0x4c>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800

08001820 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_ADC_MspInit+0x7c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d127      	bne.n	8001892 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_ADC_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 800187a:	2340      	movs	r3, #64	; 0x40
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800187e:	2303      	movs	r3, #3
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_ADC_MspInit+0x84>)
 800188e:	f001 fdbb 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40012000 	.word	0x40012000
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4a      	ldr	r2, [pc, #296]	; (80019f0 <HAL_CAN_MspInit+0x148>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d13e      	bne.n	8001948 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018ca:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a48      	ldr	r2, [pc, #288]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 80018d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018d4:	4b47      	ldr	r3, [pc, #284]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10d      	bne.n	80018f8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a44      	ldr	r2, [pc, #272]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80018e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a3d      	ldr	r2, [pc, #244]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001914:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001926:	2309      	movs	r3, #9
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4832      	ldr	r0, [pc, #200]	; (80019fc <HAL_CAN_MspInit+0x154>)
 8001932:	f001 fd69 	bl	8003408 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2014      	movs	r0, #20
 800193c:	f001 fd2d 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001940:	2014      	movs	r0, #20
 8001942:	f001 fd46 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001946:	e04f      	b.n	80019e8 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <HAL_CAN_MspInit+0x158>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d14a      	bne.n	80019e8 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 800195c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a1f      	ldr	r2, [pc, #124]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 8001976:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_CAN_MspInit+0x14c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10d      	bne.n	800199c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 800198a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198e:	6413      	str	r3, [r2, #64]	; 0x40
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_CAN_MspInit+0x150>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019b8:	2360      	movs	r3, #96	; 0x60
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019c8:	2309      	movs	r3, #9
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	; (8001a04 <HAL_CAN_MspInit+0x15c>)
 80019d4:	f001 fd18 	bl	8003408 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80019d8:	2200      	movs	r2, #0
 80019da:	2100      	movs	r1, #0
 80019dc:	2041      	movs	r0, #65	; 0x41
 80019de:	f001 fcdc 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80019e2:	2041      	movs	r0, #65	; 0x41
 80019e4:	f001 fcf5 	bl	80033d2 <HAL_NVIC_EnableIRQ>
}
 80019e8:	bf00      	nop
 80019ea:	3730      	adds	r7, #48	; 0x30
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40006400 	.word	0x40006400
 80019f4:	20000258 	.word	0x20000258
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40006800 	.word	0x40006800
 8001a04:	40020400 	.word	0x40020400

08001a08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_TIM_Base_MspInit+0x48>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d115      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_Base_MspInit+0x4c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	201d      	movs	r0, #29
 8001a3c:	f001 fcad 	bl	800339a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a40:	201d      	movs	r0, #29
 8001a42:	f001 fcc6 	bl	80033d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <HAL_UART_MspInit+0x84>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d12c      	bne.n	8001ad4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a84:	f043 0310 	orr.w	r3, r3, #16
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ab2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	4619      	mov	r1, r3
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <HAL_UART_MspInit+0x8c>)
 8001ad0:	f001 fc9a 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 f978 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WakeUp_Pin);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f001 fe2f 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Pin);
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f001 fe28 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f001 fe21 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001b6c:	4802      	ldr	r0, [pc, #8]	; (8001b78 <CAN1_RX0_IRQHandler+0x10>)
 8001b6e:	f001 f914 	bl	8002d9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200000d4 	.word	0x200000d4

08001b7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 8001b80:	2080      	movs	r0, #128	; 0x80
 8001b82:	f001 fe0f 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM3_IRQHandler+0x10>)
 8001b92:	f002 fb77 	bl	8004284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000124 	.word	0x20000124

08001ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MID_Pin);
 8001ba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba8:	f001 fdfc 	bl	80037a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <CAN2_RX1_IRQHandler+0x10>)
 8001bb6:	f001 f8f0 	bl	8002d9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200000fc 	.word	0x200000fc

08001bc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e00a      	b.n	8001bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bd6:	f3af 8000 	nop.w
 8001bda:	4601      	mov	r1, r0
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	60ba      	str	r2, [r7, #8]
 8001be2:	b2ca      	uxtb	r2, r1
 8001be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf0      	blt.n	8001bd6 <_read+0x12>
	}

return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e009      	b.n	8001c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fdc1 	bl	80017a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf1      	blt.n	8001c10 <_write+0x12>
	}
	return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_close>:

int _close(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_isatty>:

int _isatty(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
	return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f003 fa5c 	bl	800518c <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20020000 	.word	0x20020000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	2000025c 	.word	0x2000025c
 8001d08:	20000278 	.word	0x20000278

08001d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SystemInit+0x20>)
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <SystemInit+0x20>)
 8001d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d36:	490e      	ldr	r1, [pc, #56]	; (8001d70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d4c:	4c0b      	ldr	r4, [pc, #44]	; (8001d7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d5a:	f7ff ffd7 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f003 fa1b 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d62:	f7fe fc07 	bl	8000574 <main>
  bx  lr    
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d74:	080062f4 	.word	0x080062f4
  ldr r2, =_sbss
 8001d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d7c:	20000274 	.word	0x20000274

08001d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC_IRQHandler>
	...

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	; (8001dc4 <HAL_Init+0x40>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0a      	ldr	r2, [pc, #40]	; (8001dc4 <HAL_Init+0x40>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_Init+0x40>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dac:	2003      	movs	r0, #3
 8001dae:	f001 fae9 	bl	8003384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f000 f808 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db8:	f7ff fd0a 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00

08001dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x54>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <HAL_InitTick+0x58>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fb01 	bl	80033ee <HAL_SYSTICK_Config>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00e      	b.n	8001e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	d80a      	bhi.n	8001e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	f04f 30ff 	mov.w	r0, #4294967295
 8001e04:	f001 fac9 	bl	800339a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e08:	4a06      	ldr	r2, [pc, #24]	; (8001e24 <HAL_InitTick+0x5c>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000260 	.word	0x20000260

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000260 	.word	0x20000260

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e033      	b.n	8001f2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d109      	bne.n	8001ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fca6 	bl	8001820 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d118      	bne.n	8001f20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ef6:	f023 0302 	bic.w	r3, r3, #2
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fa1a 	bl	800233c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1e:	e001      	b.n	8001f24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_Start+0x1a>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0b2      	b.n	80020b8 <HAL_ADC_Start+0x180>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d018      	beq.n	8001f9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f78:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <HAL_ADC_Start+0x18c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	; (80020c8 <HAL_ADC_Start+0x190>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9a      	lsrs	r2, r3, #18
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d17a      	bne.n	800209e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d007      	beq.n	8001fda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f023 0206 	bic.w	r2, r3, #6
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ff4:	e002      	b.n	8001ffc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002004:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_ADC_Start+0x194>)
 8002006:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12a      	bne.n	8002074 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <HAL_ADC_Start+0x198>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d015      	beq.n	8002054 <HAL_ADC_Start+0x11c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a29      	ldr	r2, [pc, #164]	; (80020d4 <HAL_ADC_Start+0x19c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d105      	bne.n	800203e <HAL_ADC_Start+0x106>
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_ADC_Start+0x194>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 031f 	and.w	r3, r3, #31
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <HAL_ADC_Start+0x1a0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d136      	bne.n	80020b6 <HAL_ADC_Start+0x17e>
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_ADC_Start+0x194>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	2b00      	cmp	r3, #0
 8002052:	d130      	bne.n	80020b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d129      	bne.n	80020b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	e020      	b.n	80020b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a15      	ldr	r2, [pc, #84]	; (80020d0 <HAL_ADC_Start+0x198>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d11b      	bne.n	80020b6 <HAL_ADC_Start+0x17e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d114      	bne.n	80020b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e00b      	b.n	80020b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20000000 	.word	0x20000000
 80020c8:	431bde83 	.word	0x431bde83
 80020cc:	40012300 	.word	0x40012300
 80020d0:	40012000 	.word	0x40012000
 80020d4:	40012100 	.word	0x40012100
 80020d8:	40012200 	.word	0x40012200

080020dc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x1c>
 8002110:	2302      	movs	r3, #2
 8002112:	e105      	b.n	8002320 <HAL_ADC_ConfigChannel+0x228>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d925      	bls.n	8002170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d9      	ldr	r1, [r3, #12]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	3b1e      	subs	r3, #30
 800213a:	2207      	movs	r2, #7
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43da      	mvns	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	400a      	ands	r2, r1
 8002148:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68d9      	ldr	r1, [r3, #12]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	4603      	mov	r3, r0
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4403      	add	r3, r0
 8002162:	3b1e      	subs	r3, #30
 8002164:	409a      	lsls	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	e022      	b.n	80021b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	461a      	mov	r2, r3
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	2207      	movs	r2, #7
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6919      	ldr	r1, [r3, #16]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	4603      	mov	r3, r0
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4403      	add	r3, r0
 80021ac:	409a      	lsls	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d824      	bhi.n	8002208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	3b05      	subs	r3, #5
 80021d0:	221f      	movs	r2, #31
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	400a      	ands	r2, r1
 80021de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4618      	mov	r0, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b05      	subs	r3, #5
 80021fa:	fa00 f203 	lsl.w	r2, r0, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
 8002206:	e04c      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	d824      	bhi.n	800225a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	3b23      	subs	r3, #35	; 0x23
 8002222:	221f      	movs	r2, #31
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43da      	mvns	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	400a      	ands	r2, r1
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b29b      	uxth	r3, r3
 800223e:	4618      	mov	r0, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b23      	subs	r3, #35	; 0x23
 800224c:	fa00 f203 	lsl.w	r2, r0, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	631a      	str	r2, [r3, #48]	; 0x30
 8002258:	e023      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	3b41      	subs	r3, #65	; 0x41
 800226c:	221f      	movs	r2, #31
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	400a      	ands	r2, r1
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	3b41      	subs	r3, #65	; 0x41
 8002296:	fa00 f203 	lsl.w	r2, r0, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_ADC_ConfigChannel+0x234>)
 80022a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_ADC_ConfigChannel+0x238>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1cc>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_ADC_ConfigChannel+0x238>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d123      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x1e6>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d11b      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d111      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_ADC_ConfigChannel+0x23c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_ADC_ConfigChannel+0x240>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	0c9a      	lsrs	r2, r3, #18
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40012300 	.word	0x40012300
 8002330:	40012000 	.word	0x40012000
 8002334:	20000000 	.word	0x20000000
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002344:	4b79      	ldr	r3, [pc, #484]	; (800252c <ADC_Init+0x1f0>)
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6899      	ldr	r1, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	4a58      	ldr	r2, [pc, #352]	; (8002530 <ADC_Init+0x1f4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d022      	beq.n	800241a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6899      	ldr	r1, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6899      	ldr	r1, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	e00f      	b.n	800243a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002438:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0202 	bic.w	r2, r2, #2
 8002448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e1b      	ldrb	r3, [r3, #24]
 8002454:	005a      	lsls	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002476:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	3b01      	subs	r3, #1
 8002494:	035a      	lsls	r2, r3, #13
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	e007      	b.n	80024b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	051a      	lsls	r2, r3, #20
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f2:	025a      	lsls	r2, r3, #9
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6899      	ldr	r1, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	029a      	lsls	r2, r3, #10
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012300 	.word	0x40012300
 8002530:	0f000001 	.word	0x0f000001

08002534 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0ed      	b.n	8002722 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d102      	bne.n	8002558 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff f9a8 	bl	80018a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002568:	f7ff fc72 	bl	8001e50 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800256e:	e012      	b.n	8002596 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002570:	f7ff fc6e 	bl	8001e50 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b0a      	cmp	r3, #10
 800257c:	d90b      	bls.n	8002596 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2205      	movs	r2, #5
 800258e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0c5      	b.n	8002722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0e5      	beq.n	8002570 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0202 	bic.w	r2, r2, #2
 80025b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b4:	f7ff fc4c 	bl	8001e50 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ba:	e012      	b.n	80025e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025bc:	f7ff fc48 	bl	8001e50 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b0a      	cmp	r3, #10
 80025c8:	d90b      	bls.n	80025e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2205      	movs	r2, #5
 80025da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e09f      	b.n	8002722 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e5      	bne.n	80025bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d108      	bne.n	800260a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e007      	b.n	800261a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7e5b      	ldrb	r3, [r3, #25]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7e9b      	ldrb	r3, [r3, #26]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0220 	orr.w	r2, r2, #32
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e007      	b.n	800266e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0220 	bic.w	r2, r2, #32
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7edb      	ldrb	r3, [r3, #27]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0210 	bic.w	r2, r2, #16
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0210 	orr.w	r2, r2, #16
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7f1b      	ldrb	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d108      	bne.n	80026b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0208 	orr.w	r2, r2, #8
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e007      	b.n	80026c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0208 	bic.w	r2, r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	7f5b      	ldrb	r3, [r3, #29]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0204 	orr.w	r2, r2, #4
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0204 	bic.w	r2, r2, #4
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	ea42 0103 	orr.w	r1, r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002742:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <HAL_CAN_ConfigFilter+0x26>
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b02      	cmp	r3, #2
 800274e:	f040 80be 	bne.w	80028ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002752:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002754:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800275c:	f043 0201 	orr.w	r2, r3, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	431a      	orrs	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2201      	movs	r2, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	401a      	ands	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d123      	bne.n	80027fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3248      	adds	r2, #72	; 0x48
 80027dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f2:	6979      	ldr	r1, [r7, #20]
 80027f4:	3348      	adds	r3, #72	; 0x48
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d122      	bne.n	800284a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	431a      	orrs	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002824:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3248      	adds	r2, #72	; 0x48
 800282a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800283e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002840:	6979      	ldr	r1, [r7, #20]
 8002842:	3348      	adds	r3, #72	; 0x48
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	401a      	ands	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002864:	e007      	b.n	8002876 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	431a      	orrs	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	401a      	ands	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002890:	e007      	b.n	80028a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	431a      	orrs	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028c0:	f023 0201 	bic.w	r2, r3, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e006      	b.n	80028dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40006400 	.word	0x40006400

080028ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d12e      	bne.n	800295e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002918:	f7ff fa9a 	bl	8001e50 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800291e:	e012      	b.n	8002946 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002920:	f7ff fa96 	bl	8001e50 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b0a      	cmp	r3, #10
 800292c:	d90b      	bls.n	8002946 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2205      	movs	r2, #5
 800293e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e012      	b.n	800296c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1e5      	bne.n	8002920 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e006      	b.n	800296c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002988:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002992:	7ffb      	ldrb	r3, [r7, #31]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d003      	beq.n	80029a0 <HAL_CAN_AddTxMessage+0x2c>
 8002998:	7ffb      	ldrb	r3, [r7, #31]
 800299a:	2b02      	cmp	r3, #2
 800299c:	f040 80b8 	bne.w	8002b10 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10a      	bne.n	80029c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80a0 	beq.w	8002b00 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	0e1b      	lsrs	r3, r3, #24
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d907      	bls.n	80029e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e09e      	b.n	8002b1e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029e0:	2201      	movs	r2, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	409a      	lsls	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	6809      	ldr	r1, [r1, #0]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3318      	adds	r3, #24
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	440b      	add	r3, r1
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3318      	adds	r3, #24
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	440b      	add	r3, r1
 8002a2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3318      	adds	r3, #24
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3304      	adds	r3, #4
 8002a40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	7d1b      	ldrb	r3, [r3, #20]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d111      	bne.n	8002a6e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3318      	adds	r3, #24
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	6811      	ldr	r1, [r2, #0]
 8002a5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3318      	adds	r3, #24
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	440b      	add	r3, r1
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3307      	adds	r3, #7
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	061a      	lsls	r2, r3, #24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3306      	adds	r3, #6
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3305      	adds	r3, #5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	3204      	adds	r2, #4
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4610      	mov	r0, r2
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	6811      	ldr	r1, [r2, #0]
 8002a96:	ea43 0200 	orr.w	r2, r3, r0
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aa4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3303      	adds	r3, #3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	061a      	lsls	r2, r3, #24
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3301      	adds	r3, #1
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	6811      	ldr	r1, [r2, #0]
 8002acc:	ea43 0200 	orr.w	r2, r3, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ada:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3318      	adds	r3, #24
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4413      	add	r3, r2
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3318      	adds	r3, #24
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e00e      	b.n	8002b1e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e006      	b.n	8002b1e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b087      	sub	sp, #28
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d003      	beq.n	8002b4e <HAL_CAN_GetRxMessage+0x24>
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	f040 80f3 	bne.w	8002d34 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10e      	bne.n	8002b72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0e7      	b.n	8002d42 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d107      	bne.n	8002b90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0d8      	b.n	8002d42 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	331b      	adds	r3, #27
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0204 	and.w	r2, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10c      	bne.n	8002bc8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	331b      	adds	r3, #27
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	4413      	add	r3, r2
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0d5b      	lsrs	r3, r3, #21
 8002bbe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	331b      	adds	r3, #27
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	4413      	add	r3, r2
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	331b      	adds	r3, #27
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4413      	add	r3, r2
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0202 	and.w	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	331b      	adds	r3, #27
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	331b      	adds	r3, #27
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	4413      	add	r3, r2
 8002c32:	3304      	adds	r3, #4
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0a1a      	lsrs	r2, r3, #8
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0c1a      	lsrs	r2, r3, #16
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3302      	adds	r3, #2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	0e1a      	lsrs	r2, r3, #24
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3303      	adds	r3, #3
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0a1a      	lsrs	r2, r3, #8
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	3305      	adds	r3, #5
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0c1a      	lsrs	r2, r3, #16
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3306      	adds	r3, #6
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e1a      	lsrs	r2, r3, #24
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	3307      	adds	r3, #7
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d108      	bne.n	8002d20 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	e007      	b.n	8002d30 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0220 	orr.w	r2, r2, #32
 8002d2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	e006      	b.n	8002d42 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d002      	beq.n	8002d6c <HAL_CAN_ActivateNotification+0x1e>
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d109      	bne.n	8002d80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6959      	ldr	r1, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e006      	b.n	8002d8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08a      	sub	sp, #40	; 0x28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d07c      	beq.n	8002eda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d023      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f983 	bl	8003108 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e02:	e016      	b.n	8002e32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e00c      	b.n	8002e32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	e002      	b.n	8002e32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f989 	bl	8003144 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d024      	beq.n	8002e86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f963 	bl	800311c <HAL_CAN_TxMailbox1CompleteCallback>
 8002e56:	e016      	b.n	8002e86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d004      	beq.n	8002e6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	e00c      	b.n	8002e86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e002      	b.n	8002e86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f969 	bl	8003158 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d024      	beq.n	8002eda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f943 	bl	8003130 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eaa:	e016      	b.n	8002eda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e00c      	b.n	8002eda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	e002      	b.n	8002eda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f949 	bl	800316c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00c      	beq.n	8002efe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2210      	movs	r2, #16
 8002efc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2208      	movs	r2, #8
 8002f18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f930 	bl	8003180 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fe fb9b 	bl	8001674 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f908 	bl	8003194 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fe fb85 	bl	80016ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d006      	beq.n	8002fc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8f2 	bl	80031a8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d006      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8eb 	bl	80031bc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d07b      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d072      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003054:	2b00      	cmp	r3, #0
 8003056:	d043      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03e      	beq.n	80030e0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003068:	2b60      	cmp	r3, #96	; 0x60
 800306a:	d02b      	beq.n	80030c4 <HAL_CAN_IRQHandler+0x32a>
 800306c:	2b60      	cmp	r3, #96	; 0x60
 800306e:	d82e      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x334>
 8003070:	2b50      	cmp	r3, #80	; 0x50
 8003072:	d022      	beq.n	80030ba <HAL_CAN_IRQHandler+0x320>
 8003074:	2b50      	cmp	r3, #80	; 0x50
 8003076:	d82a      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x334>
 8003078:	2b40      	cmp	r3, #64	; 0x40
 800307a:	d019      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x316>
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d826      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x334>
 8003080:	2b30      	cmp	r3, #48	; 0x30
 8003082:	d010      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x30c>
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d822      	bhi.n	80030ce <HAL_CAN_IRQHandler+0x334>
 8003088:	2b10      	cmp	r3, #16
 800308a:	d002      	beq.n	8003092 <HAL_CAN_IRQHandler+0x2f8>
 800308c:	2b20      	cmp	r3, #32
 800308e:	d005      	beq.n	800309c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003090:	e01d      	b.n	80030ce <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 0308 	orr.w	r3, r3, #8
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800309a:	e019      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f043 0310 	orr.w	r3, r3, #16
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a4:	e014      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	f043 0320 	orr.w	r3, r3, #32
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ae:	e00f      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b8:	e00a      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c2:	e005      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030cc:	e000      	b.n	80030d0 <HAL_CAN_IRQHandler+0x336>
            break;
 80030ce:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030de:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2204      	movs	r2, #4
 80030e6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f868 	bl	80031d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003100:	bf00      	nop
 8003102:	3728      	adds	r7, #40	; 0x28
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	; (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	; (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003294:	2b00      	cmp	r3, #0
 8003296:	db0a      	blt.n	80032ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	b2da      	uxtb	r2, r3
 800329c:	490c      	ldr	r1, [pc, #48]	; (80032d0 <__NVIC_SetPriority+0x4c>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	440b      	add	r3, r1
 80032a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ac:	e00a      	b.n	80032c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4908      	ldr	r1, [pc, #32]	; (80032d4 <__NVIC_SetPriority+0x50>)
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	3b04      	subs	r3, #4
 80032bc:	0112      	lsls	r2, r2, #4
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	440b      	add	r3, r1
 80032c2:	761a      	strb	r2, [r3, #24]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e100 	.word	0xe000e100
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f1c3 0307 	rsb	r3, r3, #7
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	bf28      	it	cs
 80032f6:	2304      	movcs	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d902      	bls.n	8003308 <NVIC_EncodePriority+0x30>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3b03      	subs	r3, #3
 8003306:	e000      	b.n	800330a <NVIC_EncodePriority+0x32>
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	401a      	ands	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003320:	f04f 31ff 	mov.w	r1, #4294967295
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	43d9      	mvns	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	4313      	orrs	r3, r2
         );
}
 8003332:	4618      	mov	r0, r3
 8003334:	3724      	adds	r7, #36	; 0x24
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003350:	d301      	bcc.n	8003356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003352:	2301      	movs	r3, #1
 8003354:	e00f      	b.n	8003376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <SysTick_Config+0x40>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335e:	210f      	movs	r1, #15
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	f7ff ff8e 	bl	8003284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <SysTick_Config+0x40>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <SysTick_Config+0x40>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010

08003384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ff29 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800339a:	b580      	push	{r7, lr}
 800339c:	b086      	sub	sp, #24
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ac:	f7ff ff3e 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6978      	ldr	r0, [r7, #20]
 80033b8:	f7ff ff8e 	bl	80032d8 <NVIC_EncodePriority>
 80033bc:	4602      	mov	r2, r0
 80033be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff5d 	bl	8003284 <__NVIC_SetPriority>
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff31 	bl	8003248 <__NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ffa2 	bl	8003340 <SysTick_Config>
 80033fc:	4603      	mov	r3, r0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e16b      	b.n	80036fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 815a 	bne.w	80036f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80b4 	beq.w	80036f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b60      	ldr	r3, [pc, #384]	; (8003714 <HAL_GPIO_Init+0x30c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a5f      	ldr	r2, [pc, #380]	; (8003714 <HAL_GPIO_Init+0x30c>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_GPIO_Init+0x30c>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_GPIO_Init+0x310>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_GPIO_Init+0x314>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d02b      	beq.n	800362e <HAL_GPIO_Init+0x226>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a51      	ldr	r2, [pc, #324]	; (8003720 <HAL_GPIO_Init+0x318>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d025      	beq.n	800362a <HAL_GPIO_Init+0x222>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a50      	ldr	r2, [pc, #320]	; (8003724 <HAL_GPIO_Init+0x31c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <HAL_GPIO_Init+0x21e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4f      	ldr	r2, [pc, #316]	; (8003728 <HAL_GPIO_Init+0x320>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d019      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4e      	ldr	r2, [pc, #312]	; (800372c <HAL_GPIO_Init+0x324>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_GPIO_Init+0x328>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00d      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4c      	ldr	r2, [pc, #304]	; (8003734 <HAL_GPIO_Init+0x32c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4b      	ldr	r2, [pc, #300]	; (8003738 <HAL_GPIO_Init+0x330>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_GPIO_Init+0x20a>
 800360e:	2307      	movs	r3, #7
 8003610:	e00e      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003612:	2308      	movs	r3, #8
 8003614:	e00c      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003616:	2306      	movs	r3, #6
 8003618:	e00a      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361a:	2305      	movs	r3, #5
 800361c:	e008      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800361e:	2304      	movs	r3, #4
 8003620:	e006      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003622:	2303      	movs	r3, #3
 8003624:	e004      	b.n	8003630 <HAL_GPIO_Init+0x228>
 8003626:	2302      	movs	r3, #2
 8003628:	e002      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_GPIO_Init+0x228>
 800362e:	2300      	movs	r3, #0
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	f002 0203 	and.w	r2, r2, #3
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	4093      	lsls	r3, r2
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003640:	4935      	ldr	r1, [pc, #212]	; (8003718 <HAL_GPIO_Init+0x310>)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	3302      	adds	r3, #2
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_GPIO_Init+0x334>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003672:	4a32      	ldr	r2, [pc, #200]	; (800373c <HAL_GPIO_Init+0x334>)
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_GPIO_Init+0x334>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800369c:	4a27      	ldr	r2, [pc, #156]	; (800373c <HAL_GPIO_Init+0x334>)
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_GPIO_Init+0x334>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <HAL_GPIO_Init+0x334>)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_GPIO_Init+0x334>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_GPIO_Init+0x334>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3301      	adds	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b0f      	cmp	r3, #15
 8003700:	f67f ae90 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40013800 	.word	0x40013800
 800371c:	40020000 	.word	0x40020000
 8003720:	40020400 	.word	0x40020400
 8003724:	40020800 	.word	0x40020800
 8003728:	40020c00 	.word	0x40020c00
 800372c:	40021000 	.word	0x40021000
 8003730:	40021400 	.word	0x40021400
 8003734:	40021800 	.word	0x40021800
 8003738:	40021c00 	.word	0x40021c00
 800373c:	40013c00 	.word	0x40013c00

08003740 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
 800375c:	e001      	b.n	8003762 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
 800377c:	4613      	mov	r3, r2
 800377e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003780:	787b      	ldrb	r3, [r7, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800378c:	e003      	b.n	8003796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	041a      	lsls	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	619a      	str	r2, [r3, #24]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd feda 	bl	800157c <HAL_GPIO_EXTI_Callback>
  }
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40013c00 	.word	0x40013c00

080037d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e267      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d075      	beq.n	80038de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d00c      	beq.n	8003818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b85      	ldr	r3, [pc, #532]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003806:	2b08      	cmp	r3, #8
 8003808:	d112      	bne.n	8003830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380a:	4b82      	ldr	r3, [pc, #520]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d10b      	bne.n	8003830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	4b7e      	ldr	r3, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d05b      	beq.n	80038dc <HAL_RCC_OscConfig+0x108>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d157      	bne.n	80038dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e242      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d106      	bne.n	8003848 <HAL_RCC_OscConfig+0x74>
 800383a:	4b76      	ldr	r3, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a75      	ldr	r2, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e01d      	b.n	8003884 <HAL_RCC_OscConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x98>
 8003852:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6c      	ldr	r2, [pc, #432]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0xb0>
 800386c:	4b69      	ldr	r3, [pc, #420]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a68      	ldr	r2, [pc, #416]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7fe fae0 	bl	8001e50 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe fadc 	bl	8001e50 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e207      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b5b      	ldr	r3, [pc, #364]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0xc0>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe facc 	bl	8001e50 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038bc:	f7fe fac8 	bl	8001e50 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	; 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e1f3      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0xe8>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d063      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ea:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d11c      	bne.n	800393c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_RCC_OscConfig+0x152>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1c7      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4937      	ldr	r1, [pc, #220]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393a:	e03a      	b.n	80039b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003944:	4b34      	ldr	r3, [pc, #208]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe fa81 	bl	8001e50 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003952:	f7fe fa7d 	bl	8001e50 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e1a8      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003970:	4b28      	ldr	r3, [pc, #160]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4925      	ldr	r1, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 8003980:	4313      	orrs	r3, r2
 8003982:	600b      	str	r3, [r1, #0]
 8003984:	e015      	b.n	80039b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_OscConfig+0x244>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fe fa60 	bl	8001e50 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003994:	f7fe fa5c 	bl	8001e50 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e187      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d036      	beq.n	8003a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCC_OscConfig+0x248>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fe fa40 	bl	8001e50 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d4:	f7fe fa3c 	bl	8001e50 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e167      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x240>)
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0x200>
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_OscConfig+0x248>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fa:	f7fe fa29 	bl	8001e50 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	e00e      	b.n	8003a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fe fa25 	bl	8001e50 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d907      	bls.n	8003a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e150      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	42470000 	.word	0x42470000
 8003a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a20:	4b88      	ldr	r3, [pc, #544]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1ea      	bne.n	8003a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3e:	4b81      	ldr	r3, [pc, #516]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10f      	bne.n	8003a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a7c      	ldr	r2, [pc, #496]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6a:	4b77      	ldr	r3, [pc, #476]	; (8003c48 <HAL_RCC_OscConfig+0x474>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a76:	4b74      	ldr	r3, [pc, #464]	; (8003c48 <HAL_RCC_OscConfig+0x474>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a73      	ldr	r2, [pc, #460]	; (8003c48 <HAL_RCC_OscConfig+0x474>)
 8003a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a82:	f7fe f9e5 	bl	8001e50 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a8a:	f7fe f9e1 	bl	8001e50 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e10c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9c:	4b6a      	ldr	r3, [pc, #424]	; (8003c48 <HAL_RCC_OscConfig+0x474>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d106      	bne.n	8003abe <HAL_RCC_OscConfig+0x2ea>
 8003ab0:	4b64      	ldr	r3, [pc, #400]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	4a63      	ldr	r2, [pc, #396]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6713      	str	r3, [r2, #112]	; 0x70
 8003abc:	e01c      	b.n	8003af8 <HAL_RCC_OscConfig+0x324>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b05      	cmp	r3, #5
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x30c>
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a5b      	ldr	r2, [pc, #364]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0x324>
 8003ae0:	4b58      	ldr	r3, [pc, #352]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a57      	ldr	r2, [pc, #348]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	4b55      	ldr	r3, [pc, #340]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	4a54      	ldr	r2, [pc, #336]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f023 0304 	bic.w	r3, r3, #4
 8003af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fe f9a6 	bl	8001e50 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fe f9a2 	bl	8001e50 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0cb      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b1e:	4b49      	ldr	r3, [pc, #292]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0ee      	beq.n	8003b08 <HAL_RCC_OscConfig+0x334>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2c:	f7fe f990 	bl	8001e50 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fe f98c 	bl	8001e50 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0b5      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ee      	bne.n	8003b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b60:	4a38      	ldr	r2, [pc, #224]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80a1 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d05c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d141      	bne.n	8003c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_OscConfig+0x478>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe f960 	bl	8001e50 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe f95c 	bl	8001e50 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e087      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba6:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	085b      	lsrs	r3, r3, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	061b      	lsls	r3, r3, #24
 8003bd6:	491b      	ldr	r1, [pc, #108]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	; (8003c4c <HAL_RCC_OscConfig+0x478>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fe f935 	bl	8001e50 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bea:	f7fe f931 	bl	8001e50 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e05c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x416>
 8003c08:	e054      	b.n	8003cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCC_OscConfig+0x478>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe f91e 	bl	8001e50 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe f91a 	bl	8001e50 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e045      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x444>
 8003c36:	e03d      	b.n	8003cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e038      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <HAL_RCC_OscConfig+0x4ec>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d028      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d121      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d11a      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c80:	4013      	ands	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d111      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40023800 	.word	0x40023800

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0cc      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90c      	bls.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e0b8      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d020      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d18:	4b59      	ldr	r3, [pc, #356]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4a58      	ldr	r2, [pc, #352]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d30:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a52      	ldr	r2, [pc, #328]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3c:	4b50      	ldr	r3, [pc, #320]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	494d      	ldr	r1, [pc, #308]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d044      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d107      	bne.n	8003d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d119      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e07f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d003      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d82:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e06f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d92:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e067      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da2:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4934      	ldr	r1, [pc, #208]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db4:	f7fe f84c 	bl	8001e50 <HAL_GetTick>
 8003db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbc:	f7fe f848 	bl	8001e50 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e04f      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd2:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 020c 	and.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1eb      	bne.n	8003dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d20c      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d001      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e032      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d008      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e18:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4916      	ldr	r1, [pc, #88]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	490e      	ldr	r1, [pc, #56]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4a:	f000 f821 	bl	8003e90 <HAL_RCC_GetSysClockFreq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	490a      	ldr	r1, [pc, #40]	; (8003e84 <HAL_RCC_ClockConfig+0x1c0>)
 8003e5c:	5ccb      	ldrb	r3, [r1, r3]
 8003e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd ffac 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023c00 	.word	0x40023c00
 8003e80:	40023800 	.word	0x40023800
 8003e84:	08006234 	.word	0x08006234
 8003e88:	20000000 	.word	0x20000000
 8003e8c:	20000004 	.word	0x20000004

08003e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e94:	b094      	sub	sp, #80	; 0x50
 8003e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ea8:	4b79      	ldr	r3, [pc, #484]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	f200 80e1 	bhi.w	800407c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_GetSysClockFreq+0x3a>
 8003ec2:	e0db      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec4:	4b73      	ldr	r3, [pc, #460]	; (8004094 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ec8:	e0db      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eca:	4b73      	ldr	r3, [pc, #460]	; (8004098 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ece:	e0d8      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eda:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	2200      	movs	r2, #0
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8003efa:	2300      	movs	r3, #0
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
 8003efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f02:	4622      	mov	r2, r4
 8003f04:	462b      	mov	r3, r5
 8003f06:	f04f 0000 	mov.w	r0, #0
 8003f0a:	f04f 0100 	mov.w	r1, #0
 8003f0e:	0159      	lsls	r1, r3, #5
 8003f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f14:	0150      	lsls	r0, r2, #5
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	1a51      	subs	r1, r2, r1
 8003f1e:	6139      	str	r1, [r7, #16]
 8003f20:	4629      	mov	r1, r5
 8003f22:	eb63 0301 	sbc.w	r3, r3, r1
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f34:	4659      	mov	r1, fp
 8003f36:	018b      	lsls	r3, r1, #6
 8003f38:	4651      	mov	r1, sl
 8003f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f3e:	4651      	mov	r1, sl
 8003f40:	018a      	lsls	r2, r1, #6
 8003f42:	4651      	mov	r1, sl
 8003f44:	ebb2 0801 	subs.w	r8, r2, r1
 8003f48:	4659      	mov	r1, fp
 8003f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f62:	4690      	mov	r8, r2
 8003f64:	4699      	mov	r9, r3
 8003f66:	4623      	mov	r3, r4
 8003f68:	eb18 0303 	adds.w	r3, r8, r3
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	462b      	mov	r3, r5
 8003f70:	eb49 0303 	adc.w	r3, r9, r3
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f82:	4629      	mov	r1, r5
 8003f84:	024b      	lsls	r3, r1, #9
 8003f86:	4621      	mov	r1, r4
 8003f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	024a      	lsls	r2, r1, #9
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	2200      	movs	r2, #0
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa0:	f7fc f966 	bl	8000270 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fac:	e058      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fae:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	099b      	lsrs	r3, r3, #6
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	4611      	mov	r1, r2
 8003fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fc8:	4642      	mov	r2, r8
 8003fca:	464b      	mov	r3, r9
 8003fcc:	f04f 0000 	mov.w	r0, #0
 8003fd0:	f04f 0100 	mov.w	r1, #0
 8003fd4:	0159      	lsls	r1, r3, #5
 8003fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fda:	0150      	lsls	r0, r2, #5
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fe6:	4649      	mov	r1, r9
 8003fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004000:	ebb2 040a 	subs.w	r4, r2, sl
 8004004:	eb63 050b 	sbc.w	r5, r3, fp
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	00eb      	lsls	r3, r5, #3
 8004012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004016:	00e2      	lsls	r2, r4, #3
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
 800401c:	4643      	mov	r3, r8
 800401e:	18e3      	adds	r3, r4, r3
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	464b      	mov	r3, r9
 8004024:	eb45 0303 	adc.w	r3, r5, r3
 8004028:	607b      	str	r3, [r7, #4]
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004036:	4629      	mov	r1, r5
 8004038:	028b      	lsls	r3, r1, #10
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004040:	4621      	mov	r1, r4
 8004042:	028a      	lsls	r2, r1, #10
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404a:	2200      	movs	r2, #0
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	61fa      	str	r2, [r7, #28]
 8004050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004054:	f7fc f90c 	bl	8000270 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_GetSysClockFreq+0x200>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	3301      	adds	r3, #1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800407a:	e002      	b.n	8004082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetSysClockFreq+0x204>)
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004084:	4618      	mov	r0, r3
 8004086:	3750      	adds	r7, #80	; 0x50
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	00f42400 	.word	0x00f42400
 8004098:	007a1200 	.word	0x007a1200

0800409c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000000 	.word	0x20000000

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f7ff fff0 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0a9b      	lsrs	r3, r3, #10
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4903      	ldr	r1, [pc, #12]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40023800 	.word	0x40023800
 80040d8:	08006244 	.word	0x08006244

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e0:	f7ff ffdc 	bl	800409c <HAL_RCC_GetHCLKFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	0b5b      	lsrs	r3, r3, #13
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4903      	ldr	r1, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40023800 	.word	0x40023800
 8004100:	08006244 	.word	0x08006244

08004104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e041      	b.n	800419a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd fc6c 	bl	8001a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fa96 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d001      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e04e      	b.n	800425a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_TIM_Base_Start_IT+0xc4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e6:	d01d      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_TIM_Base_Start_IT+0xc8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_TIM_Base_Start_IT+0xcc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_Base_Start_IT+0xd0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_TIM_Base_Start_IT+0xd4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_TIM_Base_Start_IT+0xd8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x80>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a18      	ldr	r2, [pc, #96]	; (8004280 <HAL_TIM_Base_Start_IT+0xdc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d111      	bne.n	8004248 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b06      	cmp	r3, #6
 8004234:	d010      	beq.n	8004258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	e007      	b.n	8004258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40001800 	.word	0x40001800

08004284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b02      	cmp	r3, #2
 8004298:	d122      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d11b      	bne.n	80042e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0202 	mvn.w	r2, #2
 80042b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f9b5 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 80042cc:	e005      	b.n	80042da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9a7 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f9b8 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d122      	bne.n	8004334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d11b      	bne.n	8004334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f06f 0204 	mvn.w	r2, #4
 8004304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2202      	movs	r2, #2
 800430a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f98b 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8004320:	e005      	b.n	800432e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f97d 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f98e 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b08      	cmp	r3, #8
 8004340:	d122      	bne.n	8004388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b08      	cmp	r3, #8
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0208 	mvn.w	r2, #8
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f961 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f953 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 f964 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b10      	cmp	r3, #16
 8004394:	d122      	bne.n	80043dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d11b      	bne.n	80043dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0210 	mvn.w	r2, #16
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2208      	movs	r2, #8
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f937 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f929 	bl	8004622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f93a 	bl	800464a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0201 	mvn.w	r2, #1
 8004400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fd f978 	bl	80016f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d10e      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d107      	bne.n	8004434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800442c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fae0 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b40      	cmp	r3, #64	; 0x40
 8004440:	d10e      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d107      	bne.n	8004460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8ff 	bl	800465e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b20      	cmp	r3, #32
 800446c:	d10e      	bne.n	800448c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b20      	cmp	r3, #32
 800447a:	d107      	bne.n	800448c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0220 	mvn.w	r2, #32
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 faaa 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIM_ConfigClockSource+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e0b4      	b.n	800461a <HAL_TIM_ConfigClockSource+0x186>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e8:	d03e      	beq.n	8004568 <HAL_TIM_ConfigClockSource+0xd4>
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	f200 8087 	bhi.w	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f6:	f000 8086 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x172>
 80044fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fe:	d87f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d01a      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xa6>
 8004504:	2b70      	cmp	r3, #112	; 0x70
 8004506:	d87b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b60      	cmp	r3, #96	; 0x60
 800450a:	d050      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x11a>
 800450c:	2b60      	cmp	r3, #96	; 0x60
 800450e:	d877      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b50      	cmp	r3, #80	; 0x50
 8004512:	d03c      	beq.n	800458e <HAL_TIM_ConfigClockSource+0xfa>
 8004514:	2b50      	cmp	r3, #80	; 0x50
 8004516:	d873      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d058      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x13a>
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d86f      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b30      	cmp	r3, #48	; 0x30
 8004522:	d064      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004524:	2b30      	cmp	r3, #48	; 0x30
 8004526:	d86b      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b20      	cmp	r3, #32
 800452a:	d060      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 800452c:	2b20      	cmp	r3, #32
 800452e:	d867      	bhi.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d05c      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004534:	2b10      	cmp	r3, #16
 8004536:	d05a      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x15a>
 8004538:	e062      	b.n	8004600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6899      	ldr	r1, [r3, #8]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f000 f9ad 	bl	80048a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800455c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	609a      	str	r2, [r3, #8]
      break;
 8004566:	e04f      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f000 f996 	bl	80048a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800458a:	609a      	str	r2, [r3, #8]
      break;
 800458c:	e03c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	461a      	mov	r2, r3
 800459c:	f000 f90a 	bl	80047b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2150      	movs	r1, #80	; 0x50
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f963 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e02c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 f929 	bl	8004812 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2160      	movs	r1, #96	; 0x60
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f953 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045cc:	e01c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	461a      	mov	r2, r3
 80045dc:	f000 f8ea 	bl	80047b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2140      	movs	r1, #64	; 0x40
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f943 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045ec:	e00c      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f000 f93a 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045fe:	e003      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e000      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a40      	ldr	r2, [pc, #256]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3d      	ldr	r2, [pc, #244]	; (800478c <TIM_Base_SetConfig+0x118>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3c      	ldr	r2, [pc, #240]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3b      	ldr	r2, [pc, #236]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <TIM_Base_SetConfig+0x114>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d02b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d027      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <TIM_Base_SetConfig+0x118>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d023      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2b      	ldr	r2, [pc, #172]	; (8004790 <TIM_Base_SetConfig+0x11c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <TIM_Base_SetConfig+0x120>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <TIM_Base_SetConfig+0x124>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	; (800479c <TIM_Base_SetConfig+0x128>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	; (80047a0 <TIM_Base_SetConfig+0x12c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	; (80047a4 <TIM_Base_SetConfig+0x130>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	; (80047a8 <TIM_Base_SetConfig+0x134>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	; (80047ac <TIM_Base_SetConfig+0x138>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <TIM_Base_SetConfig+0x13c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <TIM_Base_SetConfig+0x114>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0xf8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <TIM_Base_SetConfig+0x124>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d103      	bne.n	8004774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	615a      	str	r2, [r3, #20]
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40001c00 	.word	0x40001c00
 80047b0:	40002000 	.word	0x40002000

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	f023 0210 	bic.w	r2, r3, #16
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800483c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800484e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4313      	orrs	r3, r2
 8004858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e05a      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e03f      	b.n	8004a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f812 	bl	8001a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f929 	bl	8004ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b08a      	sub	sp, #40	; 0x28
 8004aa6:	af02      	add	r7, sp, #8
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	603b      	str	r3, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d17c      	bne.n	8004bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_UART_Transmit+0x2c>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e075      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Transmit+0x3e>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e06e      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2221      	movs	r2, #33	; 0x21
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af6:	f7fd f9ab 	bl	8001e50 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b10:	d108      	bne.n	8004b24 <HAL_UART_Transmit+0x82>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e003      	b.n	8004b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b34:	e02a      	b.n	8004b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f840 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e036      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	3302      	adds	r3, #2
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	e007      	b.n	8004b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	781a      	ldrb	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1cf      	bne.n	8004b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2140      	movs	r1, #64	; 0x40
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f810 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e006      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b090      	sub	sp, #64	; 0x40
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	e050      	b.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d04c      	beq.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004be6:	f7fd f933 	bl	8001e50 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d241      	bcs.n	8004c7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c16:	637a      	str	r2, [r7, #52]	; 0x34
 8004c18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e5      	bne.n	8004bf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c4a:	623a      	str	r2, [r7, #32]
 8004c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	69f9      	ldr	r1, [r7, #28]
 8004c50:	6a3a      	ldr	r2, [r7, #32]
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e00f      	b.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	bf0c      	ite	eq
 8004c8a:	2301      	moveq	r3, #1
 8004c8c:	2300      	movne	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d09f      	beq.n	8004bd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3740      	adds	r7, #64	; 0x40
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b0c0      	sub	sp, #256	; 0x100
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	68d9      	ldr	r1, [r3, #12]
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	ea40 0301 	orr.w	r3, r0, r1
 8004ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cfc:	f021 010c 	bic.w	r1, r1, #12
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1e:	6999      	ldr	r1, [r3, #24]
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	ea40 0301 	orr.w	r3, r0, r1
 8004d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b8f      	ldr	r3, [pc, #572]	; (8004f70 <UART_SetConfig+0x2cc>)
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d005      	beq.n	8004d44 <UART_SetConfig+0xa0>
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	4b8d      	ldr	r3, [pc, #564]	; (8004f74 <UART_SetConfig+0x2d0>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d104      	bne.n	8004d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d44:	f7ff f9ca 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 8004d48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d4c:	e003      	b.n	8004d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d4e:	f7ff f9b1 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 8004d52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d60:	f040 810c 	bne.w	8004f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d76:	4622      	mov	r2, r4
 8004d78:	462b      	mov	r3, r5
 8004d7a:	1891      	adds	r1, r2, r2
 8004d7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d7e:	415b      	adcs	r3, r3
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d86:	4621      	mov	r1, r4
 8004d88:	eb12 0801 	adds.w	r8, r2, r1
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	eb43 0901 	adc.w	r9, r3, r1
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004da6:	4690      	mov	r8, r2
 8004da8:	4699      	mov	r9, r3
 8004daa:	4623      	mov	r3, r4
 8004dac:	eb18 0303 	adds.w	r3, r8, r3
 8004db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004db4:	462b      	mov	r3, r5
 8004db6:	eb49 0303 	adc.w	r3, r9, r3
 8004dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004dca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	18db      	adds	r3, r3, r3
 8004dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8004dd8:	4613      	mov	r3, r2
 8004dda:	eb42 0303 	adc.w	r3, r2, r3
 8004dde:	657b      	str	r3, [r7, #84]	; 0x54
 8004de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004de8:	f7fb fa42 	bl	8000270 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4b61      	ldr	r3, [pc, #388]	; (8004f78 <UART_SetConfig+0x2d4>)
 8004df2:	fba3 2302 	umull	r2, r3, r3, r2
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	011c      	lsls	r4, r3, #4
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e14:	415b      	adcs	r3, r3
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e22:	4649      	mov	r1, r9
 8004e24:	eb43 0b01 	adc.w	fp, r3, r1
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e3c:	4692      	mov	sl, r2
 8004e3e:	469b      	mov	fp, r3
 8004e40:	4643      	mov	r3, r8
 8004e42:	eb1a 0303 	adds.w	r3, sl, r3
 8004e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	18db      	adds	r3, r3, r3
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e6e:	4613      	mov	r3, r2
 8004e70:	eb42 0303 	adc.w	r3, r2, r3
 8004e74:	647b      	str	r3, [r7, #68]	; 0x44
 8004e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e7e:	f7fb f9f7 	bl	8000270 <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4611      	mov	r1, r2
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <UART_SetConfig+0x2d4>)
 8004e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	2264      	movs	r2, #100	; 0x64
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	1acb      	subs	r3, r1, r3
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e9e:	4b36      	ldr	r3, [pc, #216]	; (8004f78 <UART_SetConfig+0x2d4>)
 8004ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eac:	441c      	add	r4, r3
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	464b      	mov	r3, r9
 8004ec4:	1891      	adds	r1, r2, r2
 8004ec6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ec8:	415b      	adcs	r3, r3
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ed0:	4641      	mov	r1, r8
 8004ed2:	1851      	adds	r1, r2, r1
 8004ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	414b      	adcs	r3, r1
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ee8:	4659      	mov	r1, fp
 8004eea:	00cb      	lsls	r3, r1, #3
 8004eec:	4651      	mov	r1, sl
 8004eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef2:	4651      	mov	r1, sl
 8004ef4:	00ca      	lsls	r2, r1, #3
 8004ef6:	4610      	mov	r0, r2
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4603      	mov	r3, r0
 8004efc:	4642      	mov	r2, r8
 8004efe:	189b      	adds	r3, r3, r2
 8004f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f04:	464b      	mov	r3, r9
 8004f06:	460a      	mov	r2, r1
 8004f08:	eb42 0303 	adc.w	r3, r2, r3
 8004f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f24:	460b      	mov	r3, r1
 8004f26:	18db      	adds	r3, r3, r3
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f3a:	f7fb f999 	bl	8000270 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <UART_SetConfig+0x2d4>)
 8004f44:	fba3 1302 	umull	r1, r3, r3, r2
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	2164      	movs	r1, #100	; 0x64
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	3332      	adds	r3, #50	; 0x32
 8004f56:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <UART_SetConfig+0x2d4>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f003 0207 	and.w	r2, r3, #7
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4422      	add	r2, r4
 8004f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f6c:	e105      	b.n	800517a <UART_SetConfig+0x4d6>
 8004f6e:	bf00      	nop
 8004f70:	40011000 	.word	0x40011000
 8004f74:	40011400 	.word	0x40011400
 8004f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f8e:	4642      	mov	r2, r8
 8004f90:	464b      	mov	r3, r9
 8004f92:	1891      	adds	r1, r2, r2
 8004f94:	6239      	str	r1, [r7, #32]
 8004f96:	415b      	adcs	r3, r3
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	1854      	adds	r4, r2, r1
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	eb43 0501 	adc.w	r5, r3, r1
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	00eb      	lsls	r3, r5, #3
 8004fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fb6:	00e2      	lsls	r2, r4, #3
 8004fb8:	4614      	mov	r4, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	4643      	mov	r3, r8
 8004fbe:	18e3      	adds	r3, r4, r3
 8004fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fc4:	464b      	mov	r3, r9
 8004fc6:	eb45 0303 	adc.w	r3, r5, r3
 8004fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004fea:	4629      	mov	r1, r5
 8004fec:	008b      	lsls	r3, r1, #2
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	008a      	lsls	r2, r1, #2
 8004ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ffc:	f7fb f938 	bl	8000270 <__aeabi_uldivmod>
 8005000:	4602      	mov	r2, r0
 8005002:	460b      	mov	r3, r1
 8005004:	4b60      	ldr	r3, [pc, #384]	; (8005188 <UART_SetConfig+0x4e4>)
 8005006:	fba3 2302 	umull	r2, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	011c      	lsls	r4, r3, #4
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800501c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	1891      	adds	r1, r2, r2
 8005026:	61b9      	str	r1, [r7, #24]
 8005028:	415b      	adcs	r3, r3
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005030:	4641      	mov	r1, r8
 8005032:	1851      	adds	r1, r2, r1
 8005034:	6139      	str	r1, [r7, #16]
 8005036:	4649      	mov	r1, r9
 8005038:	414b      	adcs	r3, r1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005048:	4659      	mov	r1, fp
 800504a:	00cb      	lsls	r3, r1, #3
 800504c:	4651      	mov	r1, sl
 800504e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005052:	4651      	mov	r1, sl
 8005054:	00ca      	lsls	r2, r1, #3
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	4603      	mov	r3, r0
 800505c:	4642      	mov	r2, r8
 800505e:	189b      	adds	r3, r3, r2
 8005060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005064:	464b      	mov	r3, r9
 8005066:	460a      	mov	r2, r1
 8005068:	eb42 0303 	adc.w	r3, r2, r3
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	67bb      	str	r3, [r7, #120]	; 0x78
 800507a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005088:	4649      	mov	r1, r9
 800508a:	008b      	lsls	r3, r1, #2
 800508c:	4641      	mov	r1, r8
 800508e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005092:	4641      	mov	r1, r8
 8005094:	008a      	lsls	r2, r1, #2
 8005096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800509a:	f7fb f8e9 	bl	8000270 <__aeabi_uldivmod>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4b39      	ldr	r3, [pc, #228]	; (8005188 <UART_SetConfig+0x4e4>)
 80050a4:	fba3 1302 	umull	r1, r3, r3, r2
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	2164      	movs	r1, #100	; 0x64
 80050ac:	fb01 f303 	mul.w	r3, r1, r3
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	3332      	adds	r3, #50	; 0x32
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <UART_SetConfig+0x4e4>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050c2:	441c      	add	r4, r3
 80050c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c8:	2200      	movs	r2, #0
 80050ca:	673b      	str	r3, [r7, #112]	; 0x70
 80050cc:	677a      	str	r2, [r7, #116]	; 0x74
 80050ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050d2:	4642      	mov	r2, r8
 80050d4:	464b      	mov	r3, r9
 80050d6:	1891      	adds	r1, r2, r2
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	415b      	adcs	r3, r3
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050e2:	4641      	mov	r1, r8
 80050e4:	1851      	adds	r1, r2, r1
 80050e6:	6039      	str	r1, [r7, #0]
 80050e8:	4649      	mov	r1, r9
 80050ea:	414b      	adcs	r3, r1
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050fa:	4659      	mov	r1, fp
 80050fc:	00cb      	lsls	r3, r1, #3
 80050fe:	4651      	mov	r1, sl
 8005100:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005104:	4651      	mov	r1, sl
 8005106:	00ca      	lsls	r2, r1, #3
 8005108:	4610      	mov	r0, r2
 800510a:	4619      	mov	r1, r3
 800510c:	4603      	mov	r3, r0
 800510e:	4642      	mov	r2, r8
 8005110:	189b      	adds	r3, r3, r2
 8005112:	66bb      	str	r3, [r7, #104]	; 0x68
 8005114:	464b      	mov	r3, r9
 8005116:	460a      	mov	r2, r1
 8005118:	eb42 0303 	adc.w	r3, r2, r3
 800511c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	663b      	str	r3, [r7, #96]	; 0x60
 8005128:	667a      	str	r2, [r7, #100]	; 0x64
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005136:	4649      	mov	r1, r9
 8005138:	008b      	lsls	r3, r1, #2
 800513a:	4641      	mov	r1, r8
 800513c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005140:	4641      	mov	r1, r8
 8005142:	008a      	lsls	r2, r1, #2
 8005144:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005148:	f7fb f892 	bl	8000270 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <UART_SetConfig+0x4e4>)
 8005152:	fba3 1302 	umull	r1, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2164      	movs	r1, #100	; 0x64
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	3332      	adds	r3, #50	; 0x32
 8005164:	4a08      	ldr	r2, [pc, #32]	; (8005188 <UART_SetConfig+0x4e4>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4422      	add	r2, r4
 8005178:	609a      	str	r2, [r3, #8]
}
 800517a:	bf00      	nop
 800517c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	51eb851f 	.word	0x51eb851f

0800518c <__errno>:
 800518c:	4b01      	ldr	r3, [pc, #4]	; (8005194 <__errno+0x8>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	2000000c 	.word	0x2000000c

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4d0d      	ldr	r5, [pc, #52]	; (80051d0 <__libc_init_array+0x38>)
 800519c:	4c0d      	ldr	r4, [pc, #52]	; (80051d4 <__libc_init_array+0x3c>)
 800519e:	1b64      	subs	r4, r4, r5
 80051a0:	10a4      	asrs	r4, r4, #2
 80051a2:	2600      	movs	r6, #0
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	4d0b      	ldr	r5, [pc, #44]	; (80051d8 <__libc_init_array+0x40>)
 80051aa:	4c0c      	ldr	r4, [pc, #48]	; (80051dc <__libc_init_array+0x44>)
 80051ac:	f000 ffae 	bl	800610c <_init>
 80051b0:	1b64      	subs	r4, r4, r5
 80051b2:	10a4      	asrs	r4, r4, #2
 80051b4:	2600      	movs	r6, #0
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ca:	4798      	blx	r3
 80051cc:	3601      	adds	r6, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	080062ec 	.word	0x080062ec
 80051d4:	080062ec 	.word	0x080062ec
 80051d8:	080062ec 	.word	0x080062ec
 80051dc:	080062f0 	.word	0x080062f0

080051e0 <memset>:
 80051e0:	4402      	add	r2, r0
 80051e2:	4603      	mov	r3, r0
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d100      	bne.n	80051ea <memset+0xa>
 80051e8:	4770      	bx	lr
 80051ea:	f803 1b01 	strb.w	r1, [r3], #1
 80051ee:	e7f9      	b.n	80051e4 <memset+0x4>

080051f0 <iprintf>:
 80051f0:	b40f      	push	{r0, r1, r2, r3}
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <iprintf+0x2c>)
 80051f4:	b513      	push	{r0, r1, r4, lr}
 80051f6:	681c      	ldr	r4, [r3, #0]
 80051f8:	b124      	cbz	r4, 8005204 <iprintf+0x14>
 80051fa:	69a3      	ldr	r3, [r4, #24]
 80051fc:	b913      	cbnz	r3, 8005204 <iprintf+0x14>
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f866 	bl	80052d0 <__sinit>
 8005204:	ab05      	add	r3, sp, #20
 8005206:	9a04      	ldr	r2, [sp, #16]
 8005208:	68a1      	ldr	r1, [r4, #8]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	4620      	mov	r0, r4
 800520e:	f000 f9bd 	bl	800558c <_vfiprintf_r>
 8005212:	b002      	add	sp, #8
 8005214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005218:	b004      	add	sp, #16
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c

08005220 <std>:
 8005220:	2300      	movs	r3, #0
 8005222:	b510      	push	{r4, lr}
 8005224:	4604      	mov	r4, r0
 8005226:	e9c0 3300 	strd	r3, r3, [r0]
 800522a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800522e:	6083      	str	r3, [r0, #8]
 8005230:	8181      	strh	r1, [r0, #12]
 8005232:	6643      	str	r3, [r0, #100]	; 0x64
 8005234:	81c2      	strh	r2, [r0, #14]
 8005236:	6183      	str	r3, [r0, #24]
 8005238:	4619      	mov	r1, r3
 800523a:	2208      	movs	r2, #8
 800523c:	305c      	adds	r0, #92	; 0x5c
 800523e:	f7ff ffcf 	bl	80051e0 <memset>
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <std+0x38>)
 8005244:	6263      	str	r3, [r4, #36]	; 0x24
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <std+0x3c>)
 8005248:	62a3      	str	r3, [r4, #40]	; 0x28
 800524a:	4b05      	ldr	r3, [pc, #20]	; (8005260 <std+0x40>)
 800524c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <std+0x44>)
 8005250:	6224      	str	r4, [r4, #32]
 8005252:	6323      	str	r3, [r4, #48]	; 0x30
 8005254:	bd10      	pop	{r4, pc}
 8005256:	bf00      	nop
 8005258:	08005b35 	.word	0x08005b35
 800525c:	08005b57 	.word	0x08005b57
 8005260:	08005b8f 	.word	0x08005b8f
 8005264:	08005bb3 	.word	0x08005bb3

08005268 <_cleanup_r>:
 8005268:	4901      	ldr	r1, [pc, #4]	; (8005270 <_cleanup_r+0x8>)
 800526a:	f000 b8af 	b.w	80053cc <_fwalk_reent>
 800526e:	bf00      	nop
 8005270:	08005e8d 	.word	0x08005e8d

08005274 <__sfmoreglue>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	2268      	movs	r2, #104	; 0x68
 8005278:	1e4d      	subs	r5, r1, #1
 800527a:	4355      	muls	r5, r2
 800527c:	460e      	mov	r6, r1
 800527e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005282:	f000 f8e5 	bl	8005450 <_malloc_r>
 8005286:	4604      	mov	r4, r0
 8005288:	b140      	cbz	r0, 800529c <__sfmoreglue+0x28>
 800528a:	2100      	movs	r1, #0
 800528c:	e9c0 1600 	strd	r1, r6, [r0]
 8005290:	300c      	adds	r0, #12
 8005292:	60a0      	str	r0, [r4, #8]
 8005294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005298:	f7ff ffa2 	bl	80051e0 <memset>
 800529c:	4620      	mov	r0, r4
 800529e:	bd70      	pop	{r4, r5, r6, pc}

080052a0 <__sfp_lock_acquire>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__sfp_lock_acquire+0x8>)
 80052a2:	f000 b8b3 	b.w	800540c <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000265 	.word	0x20000265

080052ac <__sfp_lock_release>:
 80052ac:	4801      	ldr	r0, [pc, #4]	; (80052b4 <__sfp_lock_release+0x8>)
 80052ae:	f000 b8ae 	b.w	800540e <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000265 	.word	0x20000265

080052b8 <__sinit_lock_acquire>:
 80052b8:	4801      	ldr	r0, [pc, #4]	; (80052c0 <__sinit_lock_acquire+0x8>)
 80052ba:	f000 b8a7 	b.w	800540c <__retarget_lock_acquire_recursive>
 80052be:	bf00      	nop
 80052c0:	20000266 	.word	0x20000266

080052c4 <__sinit_lock_release>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__sinit_lock_release+0x8>)
 80052c6:	f000 b8a2 	b.w	800540e <__retarget_lock_release_recursive>
 80052ca:	bf00      	nop
 80052cc:	20000266 	.word	0x20000266

080052d0 <__sinit>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4604      	mov	r4, r0
 80052d4:	f7ff fff0 	bl	80052b8 <__sinit_lock_acquire>
 80052d8:	69a3      	ldr	r3, [r4, #24]
 80052da:	b11b      	cbz	r3, 80052e4 <__sinit+0x14>
 80052dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e0:	f7ff bff0 	b.w	80052c4 <__sinit_lock_release>
 80052e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052e8:	6523      	str	r3, [r4, #80]	; 0x50
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <__sinit+0x68>)
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <__sinit+0x6c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052f2:	42a3      	cmp	r3, r4
 80052f4:	bf04      	itt	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	61a3      	streq	r3, [r4, #24]
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 f820 	bl	8005340 <__sfp>
 8005300:	6060      	str	r0, [r4, #4]
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f81c 	bl	8005340 <__sfp>
 8005308:	60a0      	str	r0, [r4, #8]
 800530a:	4620      	mov	r0, r4
 800530c:	f000 f818 	bl	8005340 <__sfp>
 8005310:	2200      	movs	r2, #0
 8005312:	60e0      	str	r0, [r4, #12]
 8005314:	2104      	movs	r1, #4
 8005316:	6860      	ldr	r0, [r4, #4]
 8005318:	f7ff ff82 	bl	8005220 <std>
 800531c:	68a0      	ldr	r0, [r4, #8]
 800531e:	2201      	movs	r2, #1
 8005320:	2109      	movs	r1, #9
 8005322:	f7ff ff7d 	bl	8005220 <std>
 8005326:	68e0      	ldr	r0, [r4, #12]
 8005328:	2202      	movs	r2, #2
 800532a:	2112      	movs	r1, #18
 800532c:	f7ff ff78 	bl	8005220 <std>
 8005330:	2301      	movs	r3, #1
 8005332:	61a3      	str	r3, [r4, #24]
 8005334:	e7d2      	b.n	80052dc <__sinit+0xc>
 8005336:	bf00      	nop
 8005338:	0800624c 	.word	0x0800624c
 800533c:	08005269 	.word	0x08005269

08005340 <__sfp>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	4607      	mov	r7, r0
 8005344:	f7ff ffac 	bl	80052a0 <__sfp_lock_acquire>
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <__sfp+0x84>)
 800534a:	681e      	ldr	r6, [r3, #0]
 800534c:	69b3      	ldr	r3, [r6, #24]
 800534e:	b913      	cbnz	r3, 8005356 <__sfp+0x16>
 8005350:	4630      	mov	r0, r6
 8005352:	f7ff ffbd 	bl	80052d0 <__sinit>
 8005356:	3648      	adds	r6, #72	; 0x48
 8005358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800535c:	3b01      	subs	r3, #1
 800535e:	d503      	bpl.n	8005368 <__sfp+0x28>
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	b30b      	cbz	r3, 80053a8 <__sfp+0x68>
 8005364:	6836      	ldr	r6, [r6, #0]
 8005366:	e7f7      	b.n	8005358 <__sfp+0x18>
 8005368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800536c:	b9d5      	cbnz	r5, 80053a4 <__sfp+0x64>
 800536e:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <__sfp+0x88>)
 8005370:	60e3      	str	r3, [r4, #12]
 8005372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005376:	6665      	str	r5, [r4, #100]	; 0x64
 8005378:	f000 f847 	bl	800540a <__retarget_lock_init_recursive>
 800537c:	f7ff ff96 	bl	80052ac <__sfp_lock_release>
 8005380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	61a5      	str	r5, [r4, #24]
 800538c:	2208      	movs	r2, #8
 800538e:	4629      	mov	r1, r5
 8005390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005394:	f7ff ff24 	bl	80051e0 <memset>
 8005398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800539c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053a0:	4620      	mov	r0, r4
 80053a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053a4:	3468      	adds	r4, #104	; 0x68
 80053a6:	e7d9      	b.n	800535c <__sfp+0x1c>
 80053a8:	2104      	movs	r1, #4
 80053aa:	4638      	mov	r0, r7
 80053ac:	f7ff ff62 	bl	8005274 <__sfmoreglue>
 80053b0:	4604      	mov	r4, r0
 80053b2:	6030      	str	r0, [r6, #0]
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1d5      	bne.n	8005364 <__sfp+0x24>
 80053b8:	f7ff ff78 	bl	80052ac <__sfp_lock_release>
 80053bc:	230c      	movs	r3, #12
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	e7ee      	b.n	80053a0 <__sfp+0x60>
 80053c2:	bf00      	nop
 80053c4:	0800624c 	.word	0x0800624c
 80053c8:	ffff0001 	.word	0xffff0001

080053cc <_fwalk_reent>:
 80053cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d0:	4606      	mov	r6, r0
 80053d2:	4688      	mov	r8, r1
 80053d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053d8:	2700      	movs	r7, #0
 80053da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053de:	f1b9 0901 	subs.w	r9, r9, #1
 80053e2:	d505      	bpl.n	80053f0 <_fwalk_reent+0x24>
 80053e4:	6824      	ldr	r4, [r4, #0]
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	d1f7      	bne.n	80053da <_fwalk_reent+0xe>
 80053ea:	4638      	mov	r0, r7
 80053ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f0:	89ab      	ldrh	r3, [r5, #12]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d907      	bls.n	8005406 <_fwalk_reent+0x3a>
 80053f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053fa:	3301      	adds	r3, #1
 80053fc:	d003      	beq.n	8005406 <_fwalk_reent+0x3a>
 80053fe:	4629      	mov	r1, r5
 8005400:	4630      	mov	r0, r6
 8005402:	47c0      	blx	r8
 8005404:	4307      	orrs	r7, r0
 8005406:	3568      	adds	r5, #104	; 0x68
 8005408:	e7e9      	b.n	80053de <_fwalk_reent+0x12>

0800540a <__retarget_lock_init_recursive>:
 800540a:	4770      	bx	lr

0800540c <__retarget_lock_acquire_recursive>:
 800540c:	4770      	bx	lr

0800540e <__retarget_lock_release_recursive>:
 800540e:	4770      	bx	lr

08005410 <sbrk_aligned>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	4e0e      	ldr	r6, [pc, #56]	; (800544c <sbrk_aligned+0x3c>)
 8005414:	460c      	mov	r4, r1
 8005416:	6831      	ldr	r1, [r6, #0]
 8005418:	4605      	mov	r5, r0
 800541a:	b911      	cbnz	r1, 8005422 <sbrk_aligned+0x12>
 800541c:	f000 fb7a 	bl	8005b14 <_sbrk_r>
 8005420:	6030      	str	r0, [r6, #0]
 8005422:	4621      	mov	r1, r4
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fb75 	bl	8005b14 <_sbrk_r>
 800542a:	1c43      	adds	r3, r0, #1
 800542c:	d00a      	beq.n	8005444 <sbrk_aligned+0x34>
 800542e:	1cc4      	adds	r4, r0, #3
 8005430:	f024 0403 	bic.w	r4, r4, #3
 8005434:	42a0      	cmp	r0, r4
 8005436:	d007      	beq.n	8005448 <sbrk_aligned+0x38>
 8005438:	1a21      	subs	r1, r4, r0
 800543a:	4628      	mov	r0, r5
 800543c:	f000 fb6a 	bl	8005b14 <_sbrk_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d101      	bne.n	8005448 <sbrk_aligned+0x38>
 8005444:	f04f 34ff 	mov.w	r4, #4294967295
 8005448:	4620      	mov	r0, r4
 800544a:	bd70      	pop	{r4, r5, r6, pc}
 800544c:	2000026c 	.word	0x2000026c

08005450 <_malloc_r>:
 8005450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	1ccd      	adds	r5, r1, #3
 8005456:	f025 0503 	bic.w	r5, r5, #3
 800545a:	3508      	adds	r5, #8
 800545c:	2d0c      	cmp	r5, #12
 800545e:	bf38      	it	cc
 8005460:	250c      	movcc	r5, #12
 8005462:	2d00      	cmp	r5, #0
 8005464:	4607      	mov	r7, r0
 8005466:	db01      	blt.n	800546c <_malloc_r+0x1c>
 8005468:	42a9      	cmp	r1, r5
 800546a:	d905      	bls.n	8005478 <_malloc_r+0x28>
 800546c:	230c      	movs	r3, #12
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	2600      	movs	r6, #0
 8005472:	4630      	mov	r0, r6
 8005474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005478:	4e2e      	ldr	r6, [pc, #184]	; (8005534 <_malloc_r+0xe4>)
 800547a:	f000 fdbb 	bl	8005ff4 <__malloc_lock>
 800547e:	6833      	ldr	r3, [r6, #0]
 8005480:	461c      	mov	r4, r3
 8005482:	bb34      	cbnz	r4, 80054d2 <_malloc_r+0x82>
 8005484:	4629      	mov	r1, r5
 8005486:	4638      	mov	r0, r7
 8005488:	f7ff ffc2 	bl	8005410 <sbrk_aligned>
 800548c:	1c43      	adds	r3, r0, #1
 800548e:	4604      	mov	r4, r0
 8005490:	d14d      	bne.n	800552e <_malloc_r+0xde>
 8005492:	6834      	ldr	r4, [r6, #0]
 8005494:	4626      	mov	r6, r4
 8005496:	2e00      	cmp	r6, #0
 8005498:	d140      	bne.n	800551c <_malloc_r+0xcc>
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4631      	mov	r1, r6
 800549e:	4638      	mov	r0, r7
 80054a0:	eb04 0803 	add.w	r8, r4, r3
 80054a4:	f000 fb36 	bl	8005b14 <_sbrk_r>
 80054a8:	4580      	cmp	r8, r0
 80054aa:	d13a      	bne.n	8005522 <_malloc_r+0xd2>
 80054ac:	6821      	ldr	r1, [r4, #0]
 80054ae:	3503      	adds	r5, #3
 80054b0:	1a6d      	subs	r5, r5, r1
 80054b2:	f025 0503 	bic.w	r5, r5, #3
 80054b6:	3508      	adds	r5, #8
 80054b8:	2d0c      	cmp	r5, #12
 80054ba:	bf38      	it	cc
 80054bc:	250c      	movcc	r5, #12
 80054be:	4629      	mov	r1, r5
 80054c0:	4638      	mov	r0, r7
 80054c2:	f7ff ffa5 	bl	8005410 <sbrk_aligned>
 80054c6:	3001      	adds	r0, #1
 80054c8:	d02b      	beq.n	8005522 <_malloc_r+0xd2>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	442b      	add	r3, r5
 80054ce:	6023      	str	r3, [r4, #0]
 80054d0:	e00e      	b.n	80054f0 <_malloc_r+0xa0>
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	1b52      	subs	r2, r2, r5
 80054d6:	d41e      	bmi.n	8005516 <_malloc_r+0xc6>
 80054d8:	2a0b      	cmp	r2, #11
 80054da:	d916      	bls.n	800550a <_malloc_r+0xba>
 80054dc:	1961      	adds	r1, r4, r5
 80054de:	42a3      	cmp	r3, r4
 80054e0:	6025      	str	r5, [r4, #0]
 80054e2:	bf18      	it	ne
 80054e4:	6059      	strne	r1, [r3, #4]
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	bf08      	it	eq
 80054ea:	6031      	streq	r1, [r6, #0]
 80054ec:	5162      	str	r2, [r4, r5]
 80054ee:	604b      	str	r3, [r1, #4]
 80054f0:	4638      	mov	r0, r7
 80054f2:	f104 060b 	add.w	r6, r4, #11
 80054f6:	f000 fd83 	bl	8006000 <__malloc_unlock>
 80054fa:	f026 0607 	bic.w	r6, r6, #7
 80054fe:	1d23      	adds	r3, r4, #4
 8005500:	1af2      	subs	r2, r6, r3
 8005502:	d0b6      	beq.n	8005472 <_malloc_r+0x22>
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	50a3      	str	r3, [r4, r2]
 8005508:	e7b3      	b.n	8005472 <_malloc_r+0x22>
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	42a3      	cmp	r3, r4
 800550e:	bf0c      	ite	eq
 8005510:	6032      	streq	r2, [r6, #0]
 8005512:	605a      	strne	r2, [r3, #4]
 8005514:	e7ec      	b.n	80054f0 <_malloc_r+0xa0>
 8005516:	4623      	mov	r3, r4
 8005518:	6864      	ldr	r4, [r4, #4]
 800551a:	e7b2      	b.n	8005482 <_malloc_r+0x32>
 800551c:	4634      	mov	r4, r6
 800551e:	6876      	ldr	r6, [r6, #4]
 8005520:	e7b9      	b.n	8005496 <_malloc_r+0x46>
 8005522:	230c      	movs	r3, #12
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4638      	mov	r0, r7
 8005528:	f000 fd6a 	bl	8006000 <__malloc_unlock>
 800552c:	e7a1      	b.n	8005472 <_malloc_r+0x22>
 800552e:	6025      	str	r5, [r4, #0]
 8005530:	e7de      	b.n	80054f0 <_malloc_r+0xa0>
 8005532:	bf00      	nop
 8005534:	20000268 	.word	0x20000268

08005538 <__sfputc_r>:
 8005538:	6893      	ldr	r3, [r2, #8]
 800553a:	3b01      	subs	r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	b410      	push	{r4}
 8005540:	6093      	str	r3, [r2, #8]
 8005542:	da08      	bge.n	8005556 <__sfputc_r+0x1e>
 8005544:	6994      	ldr	r4, [r2, #24]
 8005546:	42a3      	cmp	r3, r4
 8005548:	db01      	blt.n	800554e <__sfputc_r+0x16>
 800554a:	290a      	cmp	r1, #10
 800554c:	d103      	bne.n	8005556 <__sfputc_r+0x1e>
 800554e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005552:	f000 bb33 	b.w	8005bbc <__swbuf_r>
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	1c58      	adds	r0, r3, #1
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	7019      	strb	r1, [r3, #0]
 800555e:	4608      	mov	r0, r1
 8005560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005564:	4770      	bx	lr

08005566 <__sfputs_r>:
 8005566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005568:	4606      	mov	r6, r0
 800556a:	460f      	mov	r7, r1
 800556c:	4614      	mov	r4, r2
 800556e:	18d5      	adds	r5, r2, r3
 8005570:	42ac      	cmp	r4, r5
 8005572:	d101      	bne.n	8005578 <__sfputs_r+0x12>
 8005574:	2000      	movs	r0, #0
 8005576:	e007      	b.n	8005588 <__sfputs_r+0x22>
 8005578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800557c:	463a      	mov	r2, r7
 800557e:	4630      	mov	r0, r6
 8005580:	f7ff ffda 	bl	8005538 <__sfputc_r>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d1f3      	bne.n	8005570 <__sfputs_r+0xa>
 8005588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800558c <_vfiprintf_r>:
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005590:	460d      	mov	r5, r1
 8005592:	b09d      	sub	sp, #116	; 0x74
 8005594:	4614      	mov	r4, r2
 8005596:	4698      	mov	r8, r3
 8005598:	4606      	mov	r6, r0
 800559a:	b118      	cbz	r0, 80055a4 <_vfiprintf_r+0x18>
 800559c:	6983      	ldr	r3, [r0, #24]
 800559e:	b90b      	cbnz	r3, 80055a4 <_vfiprintf_r+0x18>
 80055a0:	f7ff fe96 	bl	80052d0 <__sinit>
 80055a4:	4b89      	ldr	r3, [pc, #548]	; (80057cc <_vfiprintf_r+0x240>)
 80055a6:	429d      	cmp	r5, r3
 80055a8:	d11b      	bne.n	80055e2 <_vfiprintf_r+0x56>
 80055aa:	6875      	ldr	r5, [r6, #4]
 80055ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055ae:	07d9      	lsls	r1, r3, #31
 80055b0:	d405      	bmi.n	80055be <_vfiprintf_r+0x32>
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	059a      	lsls	r2, r3, #22
 80055b6:	d402      	bmi.n	80055be <_vfiprintf_r+0x32>
 80055b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ba:	f7ff ff27 	bl	800540c <__retarget_lock_acquire_recursive>
 80055be:	89ab      	ldrh	r3, [r5, #12]
 80055c0:	071b      	lsls	r3, r3, #28
 80055c2:	d501      	bpl.n	80055c8 <_vfiprintf_r+0x3c>
 80055c4:	692b      	ldr	r3, [r5, #16]
 80055c6:	b9eb      	cbnz	r3, 8005604 <_vfiprintf_r+0x78>
 80055c8:	4629      	mov	r1, r5
 80055ca:	4630      	mov	r0, r6
 80055cc:	f000 fb5a 	bl	8005c84 <__swsetup_r>
 80055d0:	b1c0      	cbz	r0, 8005604 <_vfiprintf_r+0x78>
 80055d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055d4:	07dc      	lsls	r4, r3, #31
 80055d6:	d50e      	bpl.n	80055f6 <_vfiprintf_r+0x6a>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	b01d      	add	sp, #116	; 0x74
 80055de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e2:	4b7b      	ldr	r3, [pc, #492]	; (80057d0 <_vfiprintf_r+0x244>)
 80055e4:	429d      	cmp	r5, r3
 80055e6:	d101      	bne.n	80055ec <_vfiprintf_r+0x60>
 80055e8:	68b5      	ldr	r5, [r6, #8]
 80055ea:	e7df      	b.n	80055ac <_vfiprintf_r+0x20>
 80055ec:	4b79      	ldr	r3, [pc, #484]	; (80057d4 <_vfiprintf_r+0x248>)
 80055ee:	429d      	cmp	r5, r3
 80055f0:	bf08      	it	eq
 80055f2:	68f5      	ldreq	r5, [r6, #12]
 80055f4:	e7da      	b.n	80055ac <_vfiprintf_r+0x20>
 80055f6:	89ab      	ldrh	r3, [r5, #12]
 80055f8:	0598      	lsls	r0, r3, #22
 80055fa:	d4ed      	bmi.n	80055d8 <_vfiprintf_r+0x4c>
 80055fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055fe:	f7ff ff06 	bl	800540e <__retarget_lock_release_recursive>
 8005602:	e7e9      	b.n	80055d8 <_vfiprintf_r+0x4c>
 8005604:	2300      	movs	r3, #0
 8005606:	9309      	str	r3, [sp, #36]	; 0x24
 8005608:	2320      	movs	r3, #32
 800560a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800560e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005612:	2330      	movs	r3, #48	; 0x30
 8005614:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80057d8 <_vfiprintf_r+0x24c>
 8005618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800561c:	f04f 0901 	mov.w	r9, #1
 8005620:	4623      	mov	r3, r4
 8005622:	469a      	mov	sl, r3
 8005624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005628:	b10a      	cbz	r2, 800562e <_vfiprintf_r+0xa2>
 800562a:	2a25      	cmp	r2, #37	; 0x25
 800562c:	d1f9      	bne.n	8005622 <_vfiprintf_r+0x96>
 800562e:	ebba 0b04 	subs.w	fp, sl, r4
 8005632:	d00b      	beq.n	800564c <_vfiprintf_r+0xc0>
 8005634:	465b      	mov	r3, fp
 8005636:	4622      	mov	r2, r4
 8005638:	4629      	mov	r1, r5
 800563a:	4630      	mov	r0, r6
 800563c:	f7ff ff93 	bl	8005566 <__sfputs_r>
 8005640:	3001      	adds	r0, #1
 8005642:	f000 80aa 	beq.w	800579a <_vfiprintf_r+0x20e>
 8005646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005648:	445a      	add	r2, fp
 800564a:	9209      	str	r2, [sp, #36]	; 0x24
 800564c:	f89a 3000 	ldrb.w	r3, [sl]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a2 	beq.w	800579a <_vfiprintf_r+0x20e>
 8005656:	2300      	movs	r3, #0
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005660:	f10a 0a01 	add.w	sl, sl, #1
 8005664:	9304      	str	r3, [sp, #16]
 8005666:	9307      	str	r3, [sp, #28]
 8005668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800566c:	931a      	str	r3, [sp, #104]	; 0x68
 800566e:	4654      	mov	r4, sl
 8005670:	2205      	movs	r2, #5
 8005672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005676:	4858      	ldr	r0, [pc, #352]	; (80057d8 <_vfiprintf_r+0x24c>)
 8005678:	f7fa fdaa 	bl	80001d0 <memchr>
 800567c:	9a04      	ldr	r2, [sp, #16]
 800567e:	b9d8      	cbnz	r0, 80056b8 <_vfiprintf_r+0x12c>
 8005680:	06d1      	lsls	r1, r2, #27
 8005682:	bf44      	itt	mi
 8005684:	2320      	movmi	r3, #32
 8005686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800568a:	0713      	lsls	r3, r2, #28
 800568c:	bf44      	itt	mi
 800568e:	232b      	movmi	r3, #43	; 0x2b
 8005690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005694:	f89a 3000 	ldrb.w	r3, [sl]
 8005698:	2b2a      	cmp	r3, #42	; 0x2a
 800569a:	d015      	beq.n	80056c8 <_vfiprintf_r+0x13c>
 800569c:	9a07      	ldr	r2, [sp, #28]
 800569e:	4654      	mov	r4, sl
 80056a0:	2000      	movs	r0, #0
 80056a2:	f04f 0c0a 	mov.w	ip, #10
 80056a6:	4621      	mov	r1, r4
 80056a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ac:	3b30      	subs	r3, #48	; 0x30
 80056ae:	2b09      	cmp	r3, #9
 80056b0:	d94e      	bls.n	8005750 <_vfiprintf_r+0x1c4>
 80056b2:	b1b0      	cbz	r0, 80056e2 <_vfiprintf_r+0x156>
 80056b4:	9207      	str	r2, [sp, #28]
 80056b6:	e014      	b.n	80056e2 <_vfiprintf_r+0x156>
 80056b8:	eba0 0308 	sub.w	r3, r0, r8
 80056bc:	fa09 f303 	lsl.w	r3, r9, r3
 80056c0:	4313      	orrs	r3, r2
 80056c2:	9304      	str	r3, [sp, #16]
 80056c4:	46a2      	mov	sl, r4
 80056c6:	e7d2      	b.n	800566e <_vfiprintf_r+0xe2>
 80056c8:	9b03      	ldr	r3, [sp, #12]
 80056ca:	1d19      	adds	r1, r3, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	9103      	str	r1, [sp, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bfbb      	ittet	lt
 80056d4:	425b      	neglt	r3, r3
 80056d6:	f042 0202 	orrlt.w	r2, r2, #2
 80056da:	9307      	strge	r3, [sp, #28]
 80056dc:	9307      	strlt	r3, [sp, #28]
 80056de:	bfb8      	it	lt
 80056e0:	9204      	strlt	r2, [sp, #16]
 80056e2:	7823      	ldrb	r3, [r4, #0]
 80056e4:	2b2e      	cmp	r3, #46	; 0x2e
 80056e6:	d10c      	bne.n	8005702 <_vfiprintf_r+0x176>
 80056e8:	7863      	ldrb	r3, [r4, #1]
 80056ea:	2b2a      	cmp	r3, #42	; 0x2a
 80056ec:	d135      	bne.n	800575a <_vfiprintf_r+0x1ce>
 80056ee:	9b03      	ldr	r3, [sp, #12]
 80056f0:	1d1a      	adds	r2, r3, #4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	9203      	str	r2, [sp, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bfb8      	it	lt
 80056fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80056fe:	3402      	adds	r4, #2
 8005700:	9305      	str	r3, [sp, #20]
 8005702:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80057e8 <_vfiprintf_r+0x25c>
 8005706:	7821      	ldrb	r1, [r4, #0]
 8005708:	2203      	movs	r2, #3
 800570a:	4650      	mov	r0, sl
 800570c:	f7fa fd60 	bl	80001d0 <memchr>
 8005710:	b140      	cbz	r0, 8005724 <_vfiprintf_r+0x198>
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	eba0 000a 	sub.w	r0, r0, sl
 8005718:	fa03 f000 	lsl.w	r0, r3, r0
 800571c:	9b04      	ldr	r3, [sp, #16]
 800571e:	4303      	orrs	r3, r0
 8005720:	3401      	adds	r4, #1
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005728:	482c      	ldr	r0, [pc, #176]	; (80057dc <_vfiprintf_r+0x250>)
 800572a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800572e:	2206      	movs	r2, #6
 8005730:	f7fa fd4e 	bl	80001d0 <memchr>
 8005734:	2800      	cmp	r0, #0
 8005736:	d03f      	beq.n	80057b8 <_vfiprintf_r+0x22c>
 8005738:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <_vfiprintf_r+0x254>)
 800573a:	bb1b      	cbnz	r3, 8005784 <_vfiprintf_r+0x1f8>
 800573c:	9b03      	ldr	r3, [sp, #12]
 800573e:	3307      	adds	r3, #7
 8005740:	f023 0307 	bic.w	r3, r3, #7
 8005744:	3308      	adds	r3, #8
 8005746:	9303      	str	r3, [sp, #12]
 8005748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574a:	443b      	add	r3, r7
 800574c:	9309      	str	r3, [sp, #36]	; 0x24
 800574e:	e767      	b.n	8005620 <_vfiprintf_r+0x94>
 8005750:	fb0c 3202 	mla	r2, ip, r2, r3
 8005754:	460c      	mov	r4, r1
 8005756:	2001      	movs	r0, #1
 8005758:	e7a5      	b.n	80056a6 <_vfiprintf_r+0x11a>
 800575a:	2300      	movs	r3, #0
 800575c:	3401      	adds	r4, #1
 800575e:	9305      	str	r3, [sp, #20]
 8005760:	4619      	mov	r1, r3
 8005762:	f04f 0c0a 	mov.w	ip, #10
 8005766:	4620      	mov	r0, r4
 8005768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800576c:	3a30      	subs	r2, #48	; 0x30
 800576e:	2a09      	cmp	r2, #9
 8005770:	d903      	bls.n	800577a <_vfiprintf_r+0x1ee>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0c5      	beq.n	8005702 <_vfiprintf_r+0x176>
 8005776:	9105      	str	r1, [sp, #20]
 8005778:	e7c3      	b.n	8005702 <_vfiprintf_r+0x176>
 800577a:	fb0c 2101 	mla	r1, ip, r1, r2
 800577e:	4604      	mov	r4, r0
 8005780:	2301      	movs	r3, #1
 8005782:	e7f0      	b.n	8005766 <_vfiprintf_r+0x1da>
 8005784:	ab03      	add	r3, sp, #12
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	462a      	mov	r2, r5
 800578a:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <_vfiprintf_r+0x258>)
 800578c:	a904      	add	r1, sp, #16
 800578e:	4630      	mov	r0, r6
 8005790:	f3af 8000 	nop.w
 8005794:	4607      	mov	r7, r0
 8005796:	1c78      	adds	r0, r7, #1
 8005798:	d1d6      	bne.n	8005748 <_vfiprintf_r+0x1bc>
 800579a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800579c:	07d9      	lsls	r1, r3, #31
 800579e:	d405      	bmi.n	80057ac <_vfiprintf_r+0x220>
 80057a0:	89ab      	ldrh	r3, [r5, #12]
 80057a2:	059a      	lsls	r2, r3, #22
 80057a4:	d402      	bmi.n	80057ac <_vfiprintf_r+0x220>
 80057a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a8:	f7ff fe31 	bl	800540e <__retarget_lock_release_recursive>
 80057ac:	89ab      	ldrh	r3, [r5, #12]
 80057ae:	065b      	lsls	r3, r3, #25
 80057b0:	f53f af12 	bmi.w	80055d8 <_vfiprintf_r+0x4c>
 80057b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b6:	e711      	b.n	80055dc <_vfiprintf_r+0x50>
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	462a      	mov	r2, r5
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <_vfiprintf_r+0x258>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4630      	mov	r0, r6
 80057c4:	f000 f880 	bl	80058c8 <_printf_i>
 80057c8:	e7e4      	b.n	8005794 <_vfiprintf_r+0x208>
 80057ca:	bf00      	nop
 80057cc:	08006270 	.word	0x08006270
 80057d0:	08006290 	.word	0x08006290
 80057d4:	08006250 	.word	0x08006250
 80057d8:	080062b0 	.word	0x080062b0
 80057dc:	080062ba 	.word	0x080062ba
 80057e0:	00000000 	.word	0x00000000
 80057e4:	08005567 	.word	0x08005567
 80057e8:	080062b6 	.word	0x080062b6

080057ec <_printf_common>:
 80057ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f0:	4616      	mov	r6, r2
 80057f2:	4699      	mov	r9, r3
 80057f4:	688a      	ldr	r2, [r1, #8]
 80057f6:	690b      	ldr	r3, [r1, #16]
 80057f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	bfb8      	it	lt
 8005800:	4613      	movlt	r3, r2
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005808:	4607      	mov	r7, r0
 800580a:	460c      	mov	r4, r1
 800580c:	b10a      	cbz	r2, 8005812 <_printf_common+0x26>
 800580e:	3301      	adds	r3, #1
 8005810:	6033      	str	r3, [r6, #0]
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	0699      	lsls	r1, r3, #26
 8005816:	bf42      	ittt	mi
 8005818:	6833      	ldrmi	r3, [r6, #0]
 800581a:	3302      	addmi	r3, #2
 800581c:	6033      	strmi	r3, [r6, #0]
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	f015 0506 	ands.w	r5, r5, #6
 8005824:	d106      	bne.n	8005834 <_printf_common+0x48>
 8005826:	f104 0a19 	add.w	sl, r4, #25
 800582a:	68e3      	ldr	r3, [r4, #12]
 800582c:	6832      	ldr	r2, [r6, #0]
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	42ab      	cmp	r3, r5
 8005832:	dc26      	bgt.n	8005882 <_printf_common+0x96>
 8005834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005838:	1e13      	subs	r3, r2, #0
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	bf18      	it	ne
 800583e:	2301      	movne	r3, #1
 8005840:	0692      	lsls	r2, r2, #26
 8005842:	d42b      	bmi.n	800589c <_printf_common+0xb0>
 8005844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005848:	4649      	mov	r1, r9
 800584a:	4638      	mov	r0, r7
 800584c:	47c0      	blx	r8
 800584e:	3001      	adds	r0, #1
 8005850:	d01e      	beq.n	8005890 <_printf_common+0xa4>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	68e5      	ldr	r5, [r4, #12]
 8005856:	6832      	ldr	r2, [r6, #0]
 8005858:	f003 0306 	and.w	r3, r3, #6
 800585c:	2b04      	cmp	r3, #4
 800585e:	bf08      	it	eq
 8005860:	1aad      	subeq	r5, r5, r2
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	6922      	ldr	r2, [r4, #16]
 8005866:	bf0c      	ite	eq
 8005868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800586c:	2500      	movne	r5, #0
 800586e:	4293      	cmp	r3, r2
 8005870:	bfc4      	itt	gt
 8005872:	1a9b      	subgt	r3, r3, r2
 8005874:	18ed      	addgt	r5, r5, r3
 8005876:	2600      	movs	r6, #0
 8005878:	341a      	adds	r4, #26
 800587a:	42b5      	cmp	r5, r6
 800587c:	d11a      	bne.n	80058b4 <_printf_common+0xc8>
 800587e:	2000      	movs	r0, #0
 8005880:	e008      	b.n	8005894 <_printf_common+0xa8>
 8005882:	2301      	movs	r3, #1
 8005884:	4652      	mov	r2, sl
 8005886:	4649      	mov	r1, r9
 8005888:	4638      	mov	r0, r7
 800588a:	47c0      	blx	r8
 800588c:	3001      	adds	r0, #1
 800588e:	d103      	bne.n	8005898 <_printf_common+0xac>
 8005890:	f04f 30ff 	mov.w	r0, #4294967295
 8005894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005898:	3501      	adds	r5, #1
 800589a:	e7c6      	b.n	800582a <_printf_common+0x3e>
 800589c:	18e1      	adds	r1, r4, r3
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	2030      	movs	r0, #48	; 0x30
 80058a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058a6:	4422      	add	r2, r4
 80058a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b0:	3302      	adds	r3, #2
 80058b2:	e7c7      	b.n	8005844 <_printf_common+0x58>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4622      	mov	r2, r4
 80058b8:	4649      	mov	r1, r9
 80058ba:	4638      	mov	r0, r7
 80058bc:	47c0      	blx	r8
 80058be:	3001      	adds	r0, #1
 80058c0:	d0e6      	beq.n	8005890 <_printf_common+0xa4>
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7d9      	b.n	800587a <_printf_common+0x8e>
	...

080058c8 <_printf_i>:
 80058c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	7e0f      	ldrb	r7, [r1, #24]
 80058ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d0:	2f78      	cmp	r7, #120	; 0x78
 80058d2:	4691      	mov	r9, r2
 80058d4:	4680      	mov	r8, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	469a      	mov	sl, r3
 80058da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058de:	d807      	bhi.n	80058f0 <_printf_i+0x28>
 80058e0:	2f62      	cmp	r7, #98	; 0x62
 80058e2:	d80a      	bhi.n	80058fa <_printf_i+0x32>
 80058e4:	2f00      	cmp	r7, #0
 80058e6:	f000 80d8 	beq.w	8005a9a <_printf_i+0x1d2>
 80058ea:	2f58      	cmp	r7, #88	; 0x58
 80058ec:	f000 80a3 	beq.w	8005a36 <_printf_i+0x16e>
 80058f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058f8:	e03a      	b.n	8005970 <_printf_i+0xa8>
 80058fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058fe:	2b15      	cmp	r3, #21
 8005900:	d8f6      	bhi.n	80058f0 <_printf_i+0x28>
 8005902:	a101      	add	r1, pc, #4	; (adr r1, 8005908 <_printf_i+0x40>)
 8005904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005908:	08005961 	.word	0x08005961
 800590c:	08005975 	.word	0x08005975
 8005910:	080058f1 	.word	0x080058f1
 8005914:	080058f1 	.word	0x080058f1
 8005918:	080058f1 	.word	0x080058f1
 800591c:	080058f1 	.word	0x080058f1
 8005920:	08005975 	.word	0x08005975
 8005924:	080058f1 	.word	0x080058f1
 8005928:	080058f1 	.word	0x080058f1
 800592c:	080058f1 	.word	0x080058f1
 8005930:	080058f1 	.word	0x080058f1
 8005934:	08005a81 	.word	0x08005a81
 8005938:	080059a5 	.word	0x080059a5
 800593c:	08005a63 	.word	0x08005a63
 8005940:	080058f1 	.word	0x080058f1
 8005944:	080058f1 	.word	0x080058f1
 8005948:	08005aa3 	.word	0x08005aa3
 800594c:	080058f1 	.word	0x080058f1
 8005950:	080059a5 	.word	0x080059a5
 8005954:	080058f1 	.word	0x080058f1
 8005958:	080058f1 	.word	0x080058f1
 800595c:	08005a6b 	.word	0x08005a6b
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	602a      	str	r2, [r5, #0]
 8005968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800596c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005970:	2301      	movs	r3, #1
 8005972:	e0a3      	b.n	8005abc <_printf_i+0x1f4>
 8005974:	6820      	ldr	r0, [r4, #0]
 8005976:	6829      	ldr	r1, [r5, #0]
 8005978:	0606      	lsls	r6, r0, #24
 800597a:	f101 0304 	add.w	r3, r1, #4
 800597e:	d50a      	bpl.n	8005996 <_printf_i+0xce>
 8005980:	680e      	ldr	r6, [r1, #0]
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	2e00      	cmp	r6, #0
 8005986:	da03      	bge.n	8005990 <_printf_i+0xc8>
 8005988:	232d      	movs	r3, #45	; 0x2d
 800598a:	4276      	negs	r6, r6
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	485e      	ldr	r0, [pc, #376]	; (8005b0c <_printf_i+0x244>)
 8005992:	230a      	movs	r3, #10
 8005994:	e019      	b.n	80059ca <_printf_i+0x102>
 8005996:	680e      	ldr	r6, [r1, #0]
 8005998:	602b      	str	r3, [r5, #0]
 800599a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800599e:	bf18      	it	ne
 80059a0:	b236      	sxthne	r6, r6
 80059a2:	e7ef      	b.n	8005984 <_printf_i+0xbc>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	0601      	lsls	r1, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xec>
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0xf2>
 80059b4:	0646      	lsls	r6, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xe8>
 80059b8:	881e      	ldrh	r6, [r3, #0]
 80059ba:	4854      	ldr	r0, [pc, #336]	; (8005b0c <_printf_i+0x244>)
 80059bc:	2f6f      	cmp	r7, #111	; 0x6f
 80059be:	bf0c      	ite	eq
 80059c0:	2308      	moveq	r3, #8
 80059c2:	230a      	movne	r3, #10
 80059c4:	2100      	movs	r1, #0
 80059c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ca:	6865      	ldr	r5, [r4, #4]
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	bfa2      	ittt	ge
 80059d2:	6821      	ldrge	r1, [r4, #0]
 80059d4:	f021 0104 	bicge.w	r1, r1, #4
 80059d8:	6021      	strge	r1, [r4, #0]
 80059da:	b90e      	cbnz	r6, 80059e0 <_printf_i+0x118>
 80059dc:	2d00      	cmp	r5, #0
 80059de:	d04d      	beq.n	8005a7c <_printf_i+0x1b4>
 80059e0:	4615      	mov	r5, r2
 80059e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ea:	5dc7      	ldrb	r7, [r0, r7]
 80059ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f0:	4637      	mov	r7, r6
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	460e      	mov	r6, r1
 80059f6:	d9f4      	bls.n	80059e2 <_printf_i+0x11a>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <_printf_i+0x14c>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07de      	lsls	r6, r3, #31
 8005a00:	d508      	bpl.n	8005a14 <_printf_i+0x14c>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6861      	ldr	r1, [r4, #4]
 8005a06:	4299      	cmp	r1, r3
 8005a08:	bfde      	ittt	le
 8005a0a:	2330      	movle	r3, #48	; 0x30
 8005a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	6122      	str	r2, [r4, #16]
 8005a18:	f8cd a000 	str.w	sl, [sp]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f7ff fee2 	bl	80057ec <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14c      	bne.n	8005ac6 <_printf_i+0x1fe>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b004      	add	sp, #16
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	4835      	ldr	r0, [pc, #212]	; (8005b0c <_printf_i+0x244>)
 8005a38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a44:	6029      	str	r1, [r5, #0]
 8005a46:	061d      	lsls	r5, r3, #24
 8005a48:	d514      	bpl.n	8005a74 <_printf_i+0x1ac>
 8005a4a:	07df      	lsls	r7, r3, #31
 8005a4c:	bf44      	itt	mi
 8005a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a52:	6023      	strmi	r3, [r4, #0]
 8005a54:	b91e      	cbnz	r6, 8005a5e <_printf_i+0x196>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	f023 0320 	bic.w	r3, r3, #32
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2310      	movs	r3, #16
 8005a60:	e7b0      	b.n	80059c4 <_printf_i+0xfc>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	f043 0320 	orr.w	r3, r3, #32
 8005a68:	6023      	str	r3, [r4, #0]
 8005a6a:	2378      	movs	r3, #120	; 0x78
 8005a6c:	4828      	ldr	r0, [pc, #160]	; (8005b10 <_printf_i+0x248>)
 8005a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a72:	e7e3      	b.n	8005a3c <_printf_i+0x174>
 8005a74:	0659      	lsls	r1, r3, #25
 8005a76:	bf48      	it	mi
 8005a78:	b2b6      	uxthmi	r6, r6
 8005a7a:	e7e6      	b.n	8005a4a <_printf_i+0x182>
 8005a7c:	4615      	mov	r5, r2
 8005a7e:	e7bb      	b.n	80059f8 <_printf_i+0x130>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	6826      	ldr	r6, [r4, #0]
 8005a84:	6961      	ldr	r1, [r4, #20]
 8005a86:	1d18      	adds	r0, r3, #4
 8005a88:	6028      	str	r0, [r5, #0]
 8005a8a:	0635      	lsls	r5, r6, #24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	d501      	bpl.n	8005a94 <_printf_i+0x1cc>
 8005a90:	6019      	str	r1, [r3, #0]
 8005a92:	e002      	b.n	8005a9a <_printf_i+0x1d2>
 8005a94:	0670      	lsls	r0, r6, #25
 8005a96:	d5fb      	bpl.n	8005a90 <_printf_i+0x1c8>
 8005a98:	8019      	strh	r1, [r3, #0]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	6123      	str	r3, [r4, #16]
 8005a9e:	4615      	mov	r5, r2
 8005aa0:	e7ba      	b.n	8005a18 <_printf_i+0x150>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	1d1a      	adds	r2, r3, #4
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	6862      	ldr	r2, [r4, #4]
 8005aac:	2100      	movs	r1, #0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f7fa fb8e 	bl	80001d0 <memchr>
 8005ab4:	b108      	cbz	r0, 8005aba <_printf_i+0x1f2>
 8005ab6:	1b40      	subs	r0, r0, r5
 8005ab8:	6060      	str	r0, [r4, #4]
 8005aba:	6863      	ldr	r3, [r4, #4]
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac4:	e7a8      	b.n	8005a18 <_printf_i+0x150>
 8005ac6:	6923      	ldr	r3, [r4, #16]
 8005ac8:	462a      	mov	r2, r5
 8005aca:	4649      	mov	r1, r9
 8005acc:	4640      	mov	r0, r8
 8005ace:	47d0      	blx	sl
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d0ab      	beq.n	8005a2c <_printf_i+0x164>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	079b      	lsls	r3, r3, #30
 8005ad8:	d413      	bmi.n	8005b02 <_printf_i+0x23a>
 8005ada:	68e0      	ldr	r0, [r4, #12]
 8005adc:	9b03      	ldr	r3, [sp, #12]
 8005ade:	4298      	cmp	r0, r3
 8005ae0:	bfb8      	it	lt
 8005ae2:	4618      	movlt	r0, r3
 8005ae4:	e7a4      	b.n	8005a30 <_printf_i+0x168>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4649      	mov	r1, r9
 8005aec:	4640      	mov	r0, r8
 8005aee:	47d0      	blx	sl
 8005af0:	3001      	adds	r0, #1
 8005af2:	d09b      	beq.n	8005a2c <_printf_i+0x164>
 8005af4:	3501      	adds	r5, #1
 8005af6:	68e3      	ldr	r3, [r4, #12]
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	1a5b      	subs	r3, r3, r1
 8005afc:	42ab      	cmp	r3, r5
 8005afe:	dcf2      	bgt.n	8005ae6 <_printf_i+0x21e>
 8005b00:	e7eb      	b.n	8005ada <_printf_i+0x212>
 8005b02:	2500      	movs	r5, #0
 8005b04:	f104 0619 	add.w	r6, r4, #25
 8005b08:	e7f5      	b.n	8005af6 <_printf_i+0x22e>
 8005b0a:	bf00      	nop
 8005b0c:	080062c1 	.word	0x080062c1
 8005b10:	080062d2 	.word	0x080062d2

08005b14 <_sbrk_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4d06      	ldr	r5, [pc, #24]	; (8005b30 <_sbrk_r+0x1c>)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	4608      	mov	r0, r1
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	f7fc f8be 	bl	8001ca0 <_sbrk>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_sbrk_r+0x1a>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_sbrk_r+0x1a>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	20000270 	.word	0x20000270

08005b34 <__sread>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	460c      	mov	r4, r1
 8005b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b3c:	f000 fab2 	bl	80060a4 <_read_r>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	bfab      	itete	ge
 8005b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b46:	89a3      	ldrhlt	r3, [r4, #12]
 8005b48:	181b      	addge	r3, r3, r0
 8005b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b4e:	bfac      	ite	ge
 8005b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b52:	81a3      	strhlt	r3, [r4, #12]
 8005b54:	bd10      	pop	{r4, pc}

08005b56 <__swrite>:
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	461f      	mov	r7, r3
 8005b5c:	898b      	ldrh	r3, [r1, #12]
 8005b5e:	05db      	lsls	r3, r3, #23
 8005b60:	4605      	mov	r5, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	4616      	mov	r6, r2
 8005b66:	d505      	bpl.n	8005b74 <__swrite+0x1e>
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f000 f9c8 	bl	8005f04 <_lseek_r>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	4628      	mov	r0, r5
 8005b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8a:	f000 b869 	b.w	8005c60 <_write_r>

08005b8e <__sseek>:
 8005b8e:	b510      	push	{r4, lr}
 8005b90:	460c      	mov	r4, r1
 8005b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b96:	f000 f9b5 	bl	8005f04 <_lseek_r>
 8005b9a:	1c43      	adds	r3, r0, #1
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	bf15      	itete	ne
 8005ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005baa:	81a3      	strheq	r3, [r4, #12]
 8005bac:	bf18      	it	ne
 8005bae:	81a3      	strhne	r3, [r4, #12]
 8005bb0:	bd10      	pop	{r4, pc}

08005bb2 <__sclose>:
 8005bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb6:	f000 b8d3 	b.w	8005d60 <_close_r>
	...

08005bbc <__swbuf_r>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	460e      	mov	r6, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	b118      	cbz	r0, 8005bce <__swbuf_r+0x12>
 8005bc6:	6983      	ldr	r3, [r0, #24]
 8005bc8:	b90b      	cbnz	r3, 8005bce <__swbuf_r+0x12>
 8005bca:	f7ff fb81 	bl	80052d0 <__sinit>
 8005bce:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <__swbuf_r+0x98>)
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d12b      	bne.n	8005c2c <__swbuf_r+0x70>
 8005bd4:	686c      	ldr	r4, [r5, #4]
 8005bd6:	69a3      	ldr	r3, [r4, #24]
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	071a      	lsls	r2, r3, #28
 8005bde:	d52f      	bpl.n	8005c40 <__swbuf_r+0x84>
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	b36b      	cbz	r3, 8005c40 <__swbuf_r+0x84>
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	6820      	ldr	r0, [r4, #0]
 8005be8:	1ac0      	subs	r0, r0, r3
 8005bea:	6963      	ldr	r3, [r4, #20]
 8005bec:	b2f6      	uxtb	r6, r6
 8005bee:	4283      	cmp	r3, r0
 8005bf0:	4637      	mov	r7, r6
 8005bf2:	dc04      	bgt.n	8005bfe <__swbuf_r+0x42>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f948 	bl	8005e8c <_fflush_r>
 8005bfc:	bb30      	cbnz	r0, 8005c4c <__swbuf_r+0x90>
 8005bfe:	68a3      	ldr	r3, [r4, #8]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	60a3      	str	r3, [r4, #8]
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	6022      	str	r2, [r4, #0]
 8005c0a:	701e      	strb	r6, [r3, #0]
 8005c0c:	6963      	ldr	r3, [r4, #20]
 8005c0e:	3001      	adds	r0, #1
 8005c10:	4283      	cmp	r3, r0
 8005c12:	d004      	beq.n	8005c1e <__swbuf_r+0x62>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	07db      	lsls	r3, r3, #31
 8005c18:	d506      	bpl.n	8005c28 <__swbuf_r+0x6c>
 8005c1a:	2e0a      	cmp	r6, #10
 8005c1c:	d104      	bne.n	8005c28 <__swbuf_r+0x6c>
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f933 	bl	8005e8c <_fflush_r>
 8005c26:	b988      	cbnz	r0, 8005c4c <__swbuf_r+0x90>
 8005c28:	4638      	mov	r0, r7
 8005c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <__swbuf_r+0x9c>)
 8005c2e:	429c      	cmp	r4, r3
 8005c30:	d101      	bne.n	8005c36 <__swbuf_r+0x7a>
 8005c32:	68ac      	ldr	r4, [r5, #8]
 8005c34:	e7cf      	b.n	8005bd6 <__swbuf_r+0x1a>
 8005c36:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <__swbuf_r+0xa0>)
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	bf08      	it	eq
 8005c3c:	68ec      	ldreq	r4, [r5, #12]
 8005c3e:	e7ca      	b.n	8005bd6 <__swbuf_r+0x1a>
 8005c40:	4621      	mov	r1, r4
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f81e 	bl	8005c84 <__swsetup_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d0cb      	beq.n	8005be4 <__swbuf_r+0x28>
 8005c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c50:	e7ea      	b.n	8005c28 <__swbuf_r+0x6c>
 8005c52:	bf00      	nop
 8005c54:	08006270 	.word	0x08006270
 8005c58:	08006290 	.word	0x08006290
 8005c5c:	08006250 	.word	0x08006250

08005c60 <_write_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	; (8005c80 <_write_r+0x20>)
 8005c64:	4604      	mov	r4, r0
 8005c66:	4608      	mov	r0, r1
 8005c68:	4611      	mov	r1, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fb ffc5 	bl	8001bfe <_write>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_write_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_write_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000270 	.word	0x20000270

08005c84 <__swsetup_r>:
 8005c84:	4b32      	ldr	r3, [pc, #200]	; (8005d50 <__swsetup_r+0xcc>)
 8005c86:	b570      	push	{r4, r5, r6, lr}
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	b125      	cbz	r5, 8005c9a <__swsetup_r+0x16>
 8005c90:	69ab      	ldr	r3, [r5, #24]
 8005c92:	b913      	cbnz	r3, 8005c9a <__swsetup_r+0x16>
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7ff fb1b 	bl	80052d0 <__sinit>
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <__swsetup_r+0xd0>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d10f      	bne.n	8005cc0 <__swsetup_r+0x3c>
 8005ca0:	686c      	ldr	r4, [r5, #4]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca8:	0719      	lsls	r1, r3, #28
 8005caa:	d42c      	bmi.n	8005d06 <__swsetup_r+0x82>
 8005cac:	06dd      	lsls	r5, r3, #27
 8005cae:	d411      	bmi.n	8005cd4 <__swsetup_r+0x50>
 8005cb0:	2309      	movs	r3, #9
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbe:	e03e      	b.n	8005d3e <__swsetup_r+0xba>
 8005cc0:	4b25      	ldr	r3, [pc, #148]	; (8005d58 <__swsetup_r+0xd4>)
 8005cc2:	429c      	cmp	r4, r3
 8005cc4:	d101      	bne.n	8005cca <__swsetup_r+0x46>
 8005cc6:	68ac      	ldr	r4, [r5, #8]
 8005cc8:	e7eb      	b.n	8005ca2 <__swsetup_r+0x1e>
 8005cca:	4b24      	ldr	r3, [pc, #144]	; (8005d5c <__swsetup_r+0xd8>)
 8005ccc:	429c      	cmp	r4, r3
 8005cce:	bf08      	it	eq
 8005cd0:	68ec      	ldreq	r4, [r5, #12]
 8005cd2:	e7e6      	b.n	8005ca2 <__swsetup_r+0x1e>
 8005cd4:	0758      	lsls	r0, r3, #29
 8005cd6:	d512      	bpl.n	8005cfe <__swsetup_r+0x7a>
 8005cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cda:	b141      	cbz	r1, 8005cee <__swsetup_r+0x6a>
 8005cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ce0:	4299      	cmp	r1, r3
 8005ce2:	d002      	beq.n	8005cea <__swsetup_r+0x66>
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f991 	bl	800600c <_free_r>
 8005cea:	2300      	movs	r3, #0
 8005cec:	6363      	str	r3, [r4, #52]	; 0x34
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cf4:	81a3      	strh	r3, [r4, #12]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	6063      	str	r3, [r4, #4]
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	89a3      	ldrh	r3, [r4, #12]
 8005d00:	f043 0308 	orr.w	r3, r3, #8
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	b94b      	cbnz	r3, 8005d1e <__swsetup_r+0x9a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d14:	d003      	beq.n	8005d1e <__swsetup_r+0x9a>
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f92b 	bl	8005f74 <__smakebuf_r>
 8005d1e:	89a0      	ldrh	r0, [r4, #12]
 8005d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d24:	f010 0301 	ands.w	r3, r0, #1
 8005d28:	d00a      	beq.n	8005d40 <__swsetup_r+0xbc>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60a3      	str	r3, [r4, #8]
 8005d2e:	6963      	ldr	r3, [r4, #20]
 8005d30:	425b      	negs	r3, r3
 8005d32:	61a3      	str	r3, [r4, #24]
 8005d34:	6923      	ldr	r3, [r4, #16]
 8005d36:	b943      	cbnz	r3, 8005d4a <__swsetup_r+0xc6>
 8005d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d3c:	d1ba      	bne.n	8005cb4 <__swsetup_r+0x30>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	0781      	lsls	r1, r0, #30
 8005d42:	bf58      	it	pl
 8005d44:	6963      	ldrpl	r3, [r4, #20]
 8005d46:	60a3      	str	r3, [r4, #8]
 8005d48:	e7f4      	b.n	8005d34 <__swsetup_r+0xb0>
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	e7f7      	b.n	8005d3e <__swsetup_r+0xba>
 8005d4e:	bf00      	nop
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	08006270 	.word	0x08006270
 8005d58:	08006290 	.word	0x08006290
 8005d5c:	08006250 	.word	0x08006250

08005d60 <_close_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4d06      	ldr	r5, [pc, #24]	; (8005d7c <_close_r+0x1c>)
 8005d64:	2300      	movs	r3, #0
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	602b      	str	r3, [r5, #0]
 8005d6c:	f7fb ff63 	bl	8001c36 <_close>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d102      	bne.n	8005d7a <_close_r+0x1a>
 8005d74:	682b      	ldr	r3, [r5, #0]
 8005d76:	b103      	cbz	r3, 8005d7a <_close_r+0x1a>
 8005d78:	6023      	str	r3, [r4, #0]
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	20000270 	.word	0x20000270

08005d80 <__sflush_r>:
 8005d80:	898a      	ldrh	r2, [r1, #12]
 8005d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d86:	4605      	mov	r5, r0
 8005d88:	0710      	lsls	r0, r2, #28
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	d458      	bmi.n	8005e40 <__sflush_r+0xc0>
 8005d8e:	684b      	ldr	r3, [r1, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	dc05      	bgt.n	8005da0 <__sflush_r+0x20>
 8005d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dc02      	bgt.n	8005da0 <__sflush_r+0x20>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	d0f9      	beq.n	8005d9a <__sflush_r+0x1a>
 8005da6:	2300      	movs	r3, #0
 8005da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dac:	682f      	ldr	r7, [r5, #0]
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	d032      	beq.n	8005e18 <__sflush_r+0x98>
 8005db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	075a      	lsls	r2, r3, #29
 8005db8:	d505      	bpl.n	8005dc6 <__sflush_r+0x46>
 8005dba:	6863      	ldr	r3, [r4, #4]
 8005dbc:	1ac0      	subs	r0, r0, r3
 8005dbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dc0:	b10b      	cbz	r3, 8005dc6 <__sflush_r+0x46>
 8005dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dc4:	1ac0      	subs	r0, r0, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b0      	blx	r6
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	d106      	bne.n	8005de6 <__sflush_r+0x66>
 8005dd8:	6829      	ldr	r1, [r5, #0]
 8005dda:	291d      	cmp	r1, #29
 8005ddc:	d82c      	bhi.n	8005e38 <__sflush_r+0xb8>
 8005dde:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <__sflush_r+0x108>)
 8005de0:	40ca      	lsrs	r2, r1
 8005de2:	07d6      	lsls	r6, r2, #31
 8005de4:	d528      	bpl.n	8005e38 <__sflush_r+0xb8>
 8005de6:	2200      	movs	r2, #0
 8005de8:	6062      	str	r2, [r4, #4]
 8005dea:	04d9      	lsls	r1, r3, #19
 8005dec:	6922      	ldr	r2, [r4, #16]
 8005dee:	6022      	str	r2, [r4, #0]
 8005df0:	d504      	bpl.n	8005dfc <__sflush_r+0x7c>
 8005df2:	1c42      	adds	r2, r0, #1
 8005df4:	d101      	bne.n	8005dfa <__sflush_r+0x7a>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	b903      	cbnz	r3, 8005dfc <__sflush_r+0x7c>
 8005dfa:	6560      	str	r0, [r4, #84]	; 0x54
 8005dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dfe:	602f      	str	r7, [r5, #0]
 8005e00:	2900      	cmp	r1, #0
 8005e02:	d0ca      	beq.n	8005d9a <__sflush_r+0x1a>
 8005e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e08:	4299      	cmp	r1, r3
 8005e0a:	d002      	beq.n	8005e12 <__sflush_r+0x92>
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f000 f8fd 	bl	800600c <_free_r>
 8005e12:	2000      	movs	r0, #0
 8005e14:	6360      	str	r0, [r4, #52]	; 0x34
 8005e16:	e7c1      	b.n	8005d9c <__sflush_r+0x1c>
 8005e18:	6a21      	ldr	r1, [r4, #32]
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	1c41      	adds	r1, r0, #1
 8005e22:	d1c7      	bne.n	8005db4 <__sflush_r+0x34>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0c4      	beq.n	8005db4 <__sflush_r+0x34>
 8005e2a:	2b1d      	cmp	r3, #29
 8005e2c:	d001      	beq.n	8005e32 <__sflush_r+0xb2>
 8005e2e:	2b16      	cmp	r3, #22
 8005e30:	d101      	bne.n	8005e36 <__sflush_r+0xb6>
 8005e32:	602f      	str	r7, [r5, #0]
 8005e34:	e7b1      	b.n	8005d9a <__sflush_r+0x1a>
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	e7ad      	b.n	8005d9c <__sflush_r+0x1c>
 8005e40:	690f      	ldr	r7, [r1, #16]
 8005e42:	2f00      	cmp	r7, #0
 8005e44:	d0a9      	beq.n	8005d9a <__sflush_r+0x1a>
 8005e46:	0793      	lsls	r3, r2, #30
 8005e48:	680e      	ldr	r6, [r1, #0]
 8005e4a:	bf08      	it	eq
 8005e4c:	694b      	ldreq	r3, [r1, #20]
 8005e4e:	600f      	str	r7, [r1, #0]
 8005e50:	bf18      	it	ne
 8005e52:	2300      	movne	r3, #0
 8005e54:	eba6 0807 	sub.w	r8, r6, r7
 8005e58:	608b      	str	r3, [r1, #8]
 8005e5a:	f1b8 0f00 	cmp.w	r8, #0
 8005e5e:	dd9c      	ble.n	8005d9a <__sflush_r+0x1a>
 8005e60:	6a21      	ldr	r1, [r4, #32]
 8005e62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e64:	4643      	mov	r3, r8
 8005e66:	463a      	mov	r2, r7
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b0      	blx	r6
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	dc06      	bgt.n	8005e7e <__sflush_r+0xfe>
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	e78e      	b.n	8005d9c <__sflush_r+0x1c>
 8005e7e:	4407      	add	r7, r0
 8005e80:	eba8 0800 	sub.w	r8, r8, r0
 8005e84:	e7e9      	b.n	8005e5a <__sflush_r+0xda>
 8005e86:	bf00      	nop
 8005e88:	20400001 	.word	0x20400001

08005e8c <_fflush_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	690b      	ldr	r3, [r1, #16]
 8005e90:	4605      	mov	r5, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	b913      	cbnz	r3, 8005e9c <_fflush_r+0x10>
 8005e96:	2500      	movs	r5, #0
 8005e98:	4628      	mov	r0, r5
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	b118      	cbz	r0, 8005ea6 <_fflush_r+0x1a>
 8005e9e:	6983      	ldr	r3, [r0, #24]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <_fflush_r+0x1a>
 8005ea2:	f7ff fa15 	bl	80052d0 <__sinit>
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <_fflush_r+0x6c>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d11b      	bne.n	8005ee4 <_fflush_r+0x58>
 8005eac:	686c      	ldr	r4, [r5, #4]
 8005eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ef      	beq.n	8005e96 <_fflush_r+0xa>
 8005eb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005eb8:	07d0      	lsls	r0, r2, #31
 8005eba:	d404      	bmi.n	8005ec6 <_fflush_r+0x3a>
 8005ebc:	0599      	lsls	r1, r3, #22
 8005ebe:	d402      	bmi.n	8005ec6 <_fflush_r+0x3a>
 8005ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec2:	f7ff faa3 	bl	800540c <__retarget_lock_acquire_recursive>
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	4621      	mov	r1, r4
 8005eca:	f7ff ff59 	bl	8005d80 <__sflush_r>
 8005ece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ed0:	07da      	lsls	r2, r3, #31
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	d4e0      	bmi.n	8005e98 <_fflush_r+0xc>
 8005ed6:	89a3      	ldrh	r3, [r4, #12]
 8005ed8:	059b      	lsls	r3, r3, #22
 8005eda:	d4dd      	bmi.n	8005e98 <_fflush_r+0xc>
 8005edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ede:	f7ff fa96 	bl	800540e <__retarget_lock_release_recursive>
 8005ee2:	e7d9      	b.n	8005e98 <_fflush_r+0xc>
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <_fflush_r+0x70>)
 8005ee6:	429c      	cmp	r4, r3
 8005ee8:	d101      	bne.n	8005eee <_fflush_r+0x62>
 8005eea:	68ac      	ldr	r4, [r5, #8]
 8005eec:	e7df      	b.n	8005eae <_fflush_r+0x22>
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <_fflush_r+0x74>)
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	bf08      	it	eq
 8005ef4:	68ec      	ldreq	r4, [r5, #12]
 8005ef6:	e7da      	b.n	8005eae <_fflush_r+0x22>
 8005ef8:	08006270 	.word	0x08006270
 8005efc:	08006290 	.word	0x08006290
 8005f00:	08006250 	.word	0x08006250

08005f04 <_lseek_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_lseek_r+0x20>)
 8005f08:	4604      	mov	r4, r0
 8005f0a:	4608      	mov	r0, r1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	2200      	movs	r2, #0
 8005f10:	602a      	str	r2, [r5, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f7fb feb6 	bl	8001c84 <_lseek>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_lseek_r+0x1e>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_lseek_r+0x1e>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	20000270 	.word	0x20000270

08005f28 <__swhatbuf_r>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	460e      	mov	r6, r1
 8005f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f30:	2900      	cmp	r1, #0
 8005f32:	b096      	sub	sp, #88	; 0x58
 8005f34:	4614      	mov	r4, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	da08      	bge.n	8005f4c <__swhatbuf_r+0x24>
 8005f3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	061a      	lsls	r2, r3, #24
 8005f44:	d410      	bmi.n	8005f68 <__swhatbuf_r+0x40>
 8005f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f4a:	e00e      	b.n	8005f6a <__swhatbuf_r+0x42>
 8005f4c:	466a      	mov	r2, sp
 8005f4e:	f000 f8bb 	bl	80060c8 <_fstat_r>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	dbf1      	blt.n	8005f3a <__swhatbuf_r+0x12>
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f60:	425a      	negs	r2, r3
 8005f62:	415a      	adcs	r2, r3
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	e7ee      	b.n	8005f46 <__swhatbuf_r+0x1e>
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	b016      	add	sp, #88	; 0x58
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f74 <__smakebuf_r>:
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f78:	079d      	lsls	r5, r3, #30
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	d507      	bpl.n	8005f90 <__smakebuf_r+0x1c>
 8005f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	2301      	movs	r3, #1
 8005f8a:	6163      	str	r3, [r4, #20]
 8005f8c:	b002      	add	sp, #8
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	ab01      	add	r3, sp, #4
 8005f92:	466a      	mov	r2, sp
 8005f94:	f7ff ffc8 	bl	8005f28 <__swhatbuf_r>
 8005f98:	9900      	ldr	r1, [sp, #0]
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff fa57 	bl	8005450 <_malloc_r>
 8005fa2:	b948      	cbnz	r0, 8005fb8 <__smakebuf_r+0x44>
 8005fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa8:	059a      	lsls	r2, r3, #22
 8005faa:	d4ef      	bmi.n	8005f8c <__smakebuf_r+0x18>
 8005fac:	f023 0303 	bic.w	r3, r3, #3
 8005fb0:	f043 0302 	orr.w	r3, r3, #2
 8005fb4:	81a3      	strh	r3, [r4, #12]
 8005fb6:	e7e3      	b.n	8005f80 <__smakebuf_r+0xc>
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <__smakebuf_r+0x7c>)
 8005fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	6020      	str	r0, [r4, #0]
 8005fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	9b00      	ldr	r3, [sp, #0]
 8005fc8:	6163      	str	r3, [r4, #20]
 8005fca:	9b01      	ldr	r3, [sp, #4]
 8005fcc:	6120      	str	r0, [r4, #16]
 8005fce:	b15b      	cbz	r3, 8005fe8 <__smakebuf_r+0x74>
 8005fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 f889 	bl	80060ec <_isatty_r>
 8005fda:	b128      	cbz	r0, 8005fe8 <__smakebuf_r+0x74>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f023 0303 	bic.w	r3, r3, #3
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	81a3      	strh	r3, [r4, #12]
 8005fe8:	89a0      	ldrh	r0, [r4, #12]
 8005fea:	4305      	orrs	r5, r0
 8005fec:	81a5      	strh	r5, [r4, #12]
 8005fee:	e7cd      	b.n	8005f8c <__smakebuf_r+0x18>
 8005ff0:	08005269 	.word	0x08005269

08005ff4 <__malloc_lock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_lock+0x8>)
 8005ff6:	f7ff ba09 	b.w	800540c <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20000264 	.word	0x20000264

08006000 <__malloc_unlock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_unlock+0x8>)
 8006002:	f7ff ba04 	b.w	800540e <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	20000264 	.word	0x20000264

0800600c <_free_r>:
 800600c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800600e:	2900      	cmp	r1, #0
 8006010:	d044      	beq.n	800609c <_free_r+0x90>
 8006012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006016:	9001      	str	r0, [sp, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f1a1 0404 	sub.w	r4, r1, #4
 800601e:	bfb8      	it	lt
 8006020:	18e4      	addlt	r4, r4, r3
 8006022:	f7ff ffe7 	bl	8005ff4 <__malloc_lock>
 8006026:	4a1e      	ldr	r2, [pc, #120]	; (80060a0 <_free_r+0x94>)
 8006028:	9801      	ldr	r0, [sp, #4]
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	b933      	cbnz	r3, 800603c <_free_r+0x30>
 800602e:	6063      	str	r3, [r4, #4]
 8006030:	6014      	str	r4, [r2, #0]
 8006032:	b003      	add	sp, #12
 8006034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006038:	f7ff bfe2 	b.w	8006000 <__malloc_unlock>
 800603c:	42a3      	cmp	r3, r4
 800603e:	d908      	bls.n	8006052 <_free_r+0x46>
 8006040:	6825      	ldr	r5, [r4, #0]
 8006042:	1961      	adds	r1, r4, r5
 8006044:	428b      	cmp	r3, r1
 8006046:	bf01      	itttt	eq
 8006048:	6819      	ldreq	r1, [r3, #0]
 800604a:	685b      	ldreq	r3, [r3, #4]
 800604c:	1949      	addeq	r1, r1, r5
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	e7ed      	b.n	800602e <_free_r+0x22>
 8006052:	461a      	mov	r2, r3
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	b10b      	cbz	r3, 800605c <_free_r+0x50>
 8006058:	42a3      	cmp	r3, r4
 800605a:	d9fa      	bls.n	8006052 <_free_r+0x46>
 800605c:	6811      	ldr	r1, [r2, #0]
 800605e:	1855      	adds	r5, r2, r1
 8006060:	42a5      	cmp	r5, r4
 8006062:	d10b      	bne.n	800607c <_free_r+0x70>
 8006064:	6824      	ldr	r4, [r4, #0]
 8006066:	4421      	add	r1, r4
 8006068:	1854      	adds	r4, r2, r1
 800606a:	42a3      	cmp	r3, r4
 800606c:	6011      	str	r1, [r2, #0]
 800606e:	d1e0      	bne.n	8006032 <_free_r+0x26>
 8006070:	681c      	ldr	r4, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	6053      	str	r3, [r2, #4]
 8006076:	4421      	add	r1, r4
 8006078:	6011      	str	r1, [r2, #0]
 800607a:	e7da      	b.n	8006032 <_free_r+0x26>
 800607c:	d902      	bls.n	8006084 <_free_r+0x78>
 800607e:	230c      	movs	r3, #12
 8006080:	6003      	str	r3, [r0, #0]
 8006082:	e7d6      	b.n	8006032 <_free_r+0x26>
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	1961      	adds	r1, r4, r5
 8006088:	428b      	cmp	r3, r1
 800608a:	bf04      	itt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	6063      	str	r3, [r4, #4]
 8006092:	bf04      	itt	eq
 8006094:	1949      	addeq	r1, r1, r5
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	6054      	str	r4, [r2, #4]
 800609a:	e7ca      	b.n	8006032 <_free_r+0x26>
 800609c:	b003      	add	sp, #12
 800609e:	bd30      	pop	{r4, r5, pc}
 80060a0:	20000268 	.word	0x20000268

080060a4 <_read_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_read_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fb fd86 	bl	8001bc4 <_read>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_read_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_read_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000270 	.word	0x20000270

080060c8 <_fstat_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d07      	ldr	r5, [pc, #28]	; (80060e8 <_fstat_r+0x20>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	602b      	str	r3, [r5, #0]
 80060d6:	f7fb fdba 	bl	8001c4e <_fstat>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d102      	bne.n	80060e4 <_fstat_r+0x1c>
 80060de:	682b      	ldr	r3, [r5, #0]
 80060e0:	b103      	cbz	r3, 80060e4 <_fstat_r+0x1c>
 80060e2:	6023      	str	r3, [r4, #0]
 80060e4:	bd38      	pop	{r3, r4, r5, pc}
 80060e6:	bf00      	nop
 80060e8:	20000270 	.word	0x20000270

080060ec <_isatty_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d06      	ldr	r5, [pc, #24]	; (8006108 <_isatty_r+0x1c>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	602b      	str	r3, [r5, #0]
 80060f8:	f7fb fdb9 	bl	8001c6e <_isatty>
 80060fc:	1c43      	adds	r3, r0, #1
 80060fe:	d102      	bne.n	8006106 <_isatty_r+0x1a>
 8006100:	682b      	ldr	r3, [r5, #0]
 8006102:	b103      	cbz	r3, 8006106 <_isatty_r+0x1a>
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	bd38      	pop	{r3, r4, r5, pc}
 8006108:	20000270 	.word	0x20000270

0800610c <_init>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	bf00      	nop
 8006110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006112:	bc08      	pop	{r3}
 8006114:	469e      	mov	lr, r3
 8006116:	4770      	bx	lr

08006118 <_fini>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr
